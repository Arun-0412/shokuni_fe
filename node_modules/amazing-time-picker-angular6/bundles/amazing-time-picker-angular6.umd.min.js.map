{"version":3,"file":"amazing-time-picker-angular6.umd.min.js","sources":["~/amazing-time-picker-angular6/src/app/atp-library/atp-core.service.ts","~/amazing-time-picker-angular6/src/app/atp-library/time-picker/time-picker.component.ts","../../../node_modules/rxjs/node_modules/tslib/tslib.es6.js","../../../node_modules/rxjs/src/internal/util/isFunction.ts","../../../node_modules/rxjs/src/internal/config.ts","../../../node_modules/rxjs/src/internal/util/hostReportError.ts","../../../node_modules/rxjs/src/internal/Observer.ts","../../../node_modules/rxjs/src/internal/util/isObject.ts","../../../node_modules/rxjs/src/internal/util/tryCatch.ts","../../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../../node_modules/rxjs/src/internal/Subscription.ts","../../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../../node_modules/rxjs/src/internal/Subscriber.ts","../../../node_modules/rxjs/src/internal/Observable.ts","../../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../../node_modules/rxjs/src/internal/util/pipe.ts","../../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../../node_modules/rxjs/src/internal/Subject.ts","../../../node_modules/rxjs/src/internal/operators/refCount.ts","../../../node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","../../../node_modules/rxjs/src/internal/operators/groupBy.ts","../../../node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","../../../node_modules/rxjs/src/internal/BehaviorSubject.ts","../../../node_modules/rxjs/src/internal/scheduler/Action.ts","../../../node_modules/rxjs/src/internal/scheduler/QueueAction.ts","../../../node_modules/rxjs/src/internal/Scheduler.ts","../../../node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","../../../node_modules/rxjs/src/internal/scheduler/queue.ts","../../../node_modules/rxjs/src/internal/scheduler/QueueScheduler.ts","../../../node_modules/rxjs/src/internal/observable/empty.ts","../../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../../node_modules/rxjs/src/internal/observable/fromArray.ts","../../../node_modules/rxjs/src/internal/observable/of.ts","../../../node_modules/rxjs/src/internal/util/isScheduler.ts","../../../node_modules/rxjs/src/internal/observable/scalar.ts","../../../node_modules/rxjs/src/internal/observable/throwError.ts","../../../node_modules/rxjs/src/internal/Notification.ts","../../../node_modules/rxjs/src/internal/operators/observeOn.ts","../../../node_modules/rxjs/src/internal/ReplaySubject.ts","../../../node_modules/rxjs/src/internal/util/Immediate.ts","../../../node_modules/rxjs/src/internal/AsyncSubject.ts","../../../node_modules/rxjs/src/internal/scheduler/AsapAction.ts","../../../node_modules/rxjs/src/internal/scheduler/AnimationFrameAction.ts","../../../node_modules/rxjs/src/internal/scheduler/asap.ts","../../../node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts","../../../node_modules/rxjs/src/internal/scheduler/async.ts","../../../node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts","../../../node_modules/rxjs/src/internal/scheduler/animationFrame.ts","../../../node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler.ts","../../../node_modules/rxjs/src/internal/OuterSubscriber.ts","../../../node_modules/rxjs/src/internal/util/ArgumentOutOfRangeError.ts","../../../node_modules/rxjs/src/internal/util/EmptyError.ts","../../../node_modules/rxjs/src/internal/util/TimeoutError.ts","../../../node_modules/rxjs/src/internal/operators/map.ts","../../../node_modules/rxjs/src/internal/InnerSubscriber.ts","../../../node_modules/rxjs/src/internal/symbol/iterator.ts","../../../node_modules/rxjs/src/internal/util/subscribeTo.ts","../../../node_modules/rxjs/src/internal/util/subscribeToObservable.ts","../../../node_modules/rxjs/src/internal/util/isPromise.ts","../../../node_modules/rxjs/src/internal/util/subscribeToPromise.ts","../../../node_modules/rxjs/src/internal/util/subscribeToIterable.ts","../../../node_modules/rxjs/src/internal/util/subscribeToResult.ts","../../../node_modules/rxjs/src/internal/observable/combineLatest.ts","../../../node_modules/rxjs/src/internal/observable/zip.ts","../../../node_modules/rxjs/src/internal/operators/mergeMap.ts","../../../node_modules/rxjs/src/internal/observable/forkJoin.ts","../../../node_modules/rxjs/src/internal/observable/race.ts","~/amazing-time-picker-angular6/src/app/atp-library/atp-time-picker/atp-time-picker.component.ts","~/amazing-time-picker-angular6/src/app/atp-library/preferences.ts","~/amazing-time-picker-angular6/src/app/atp-library/atp-time-picker.service.ts","~/amazing-time-picker-angular6/src/app/atp-library/atp.directive.ts","~/amazing-time-picker-angular6/src/app/atp-library/atp-time-picker.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ITime } from './definitions';\nexport class AtpCoreService {\nconstructor() { }\n/**\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\npublic allowedTimes (min, max) {\n    const /** @type {?} */ allTimes = [];\n    const /** @type {?} */ nowMinHour = +min.split(':')[0];\n    const /** @type {?} */ nowMaxHour = +max.split(':')[0];\n    const /** @type {?} */ nowMinMin = +min.split(':')[1];\n    const /** @type {?} */ nowMaxMin = +max.split(':')[1];\n    for (let /** @type {?} */ i = nowMinHour; i <= nowMaxHour; i++) {\n      let /** @type {?} */ j = 0, /** @type {?} */\n          jDest = 59;\n      if (i === nowMinHour) {\n        j = nowMinMin;\n      }else if (i === nowMaxHour) {\n        jDest = nowMaxMin;\n      }\n      for (j; j <= jDest; j++) {\n        const /** @type {?} */ hour = i <= 12 ? i : i - 12;\n        const /** @type {?} */ minute = j;\n        const /** @type {?} */ ampm = i < 12 ? 'AM' : 'PM';\n        allTimes.push(hour + ':' + minute + ' ' + ampm);\n      }\n    }\n    return allTimes;\n  }\n/**\n * @param {?} type\n * @return {?}\n */\npublic ClockMaker (type: 'minute' | 'hour'): Array<any> {\n    const /** @type {?} */ items = [];\n    const /** @type {?} */ timeVal = (type === 'minute') ? 60 : 12;\n    const /** @type {?} */ timeStep = (type === 'minute') ? 5 : 1;\n    const /** @type {?} */ timeStart = (type === 'minute') ? 0 : 1;\n    const /** @type {?} */ r = 124;\n    const /** @type {?} */ j = r - 25;\n\n    for (let /** @type {?} */ min = timeStart; min <= timeVal; min += timeStep) {\n      if (min !== 60) {\n        const /** @type {?} */ str = String(min);\n        const /** @type {?} */ x = j * Math.sin(Math.PI * 2 * (min / timeVal));\n        const /** @type {?} */ y = j * Math.cos(Math.PI * 2 * (min / timeVal));\n\n        items.push({\n          time: str,\n          left: (x + r - 17) + 'px',\n          top: (-y + r - 17) + 'px',\n          type\n        });\n      }\n    }\n    return items;\n  }\n/**\n * @param {?} time\n * @return {?}\n */\npublic TimeToString(time: ITime): string {\n    const { ampm, minute, hour } = time;\n    let /** @type {?} */ hh = ampm === 'PM' ? +hour + 12 : +hour;\n    if (ampm === 'AM' && hh === 12) {\n      hh = 0;\n    }\n    if ( hh === 24) {\n      hh = 12;\n    }\n    hh = hh < 10 ? '0' + hh : /** @type {?} */(( '' + hh as any));\n    const /** @type {?} */ mm = minute < 10 ? '0' + minute : minute;\n    return `${hh}:${mm}`;\n  }\n/**\n * Converts 00:00 format to ITime object\n * @param {?} time\n * @return {?}\n */\npublic StringToTime (time: string): ITime {\n    const [h, m] = time.split(':');\n    let /** @type {?} */ hour = +h > 12 ? +h - 12 : +h;\n    hour = hour === 0 ? 12 : hour;\n    const /** @type {?} */ ampm = +h >= 12 ? 'PM' : 'AM';\n    return {\n      ampm, minute: +m, hour\n    };\n  }\n/**\n * \\@experimental\n * @param {?} ele\n * @param {?} parrentPos\n * @param {?} step\n * @return {?}\n */\npublic CalcDegrees (ele: any, parrentPos: any, step: number): number {\n    const /** @type {?} */ clock = {\n      width: ele.currentTarget.offsetWidth,\n      height: ele.currentTarget.offsetHeight\n    };\n    const /** @type {?} */ targetX = clock.width / 2;\n    const /** @type {?} */ targetY = clock.height / 2;\n    const /** @type {?} */ Vx = Math.round((ele.clientX - parrentPos.left) - targetX);\n    const /** @type {?} */ Vy = Math.round(targetY - (ele.clientY - parrentPos.top));\n    let /** @type {?} */ radians = -Math.atan2(Vy, Vx);\n    radians += 2.5 * Math.PI;\n\n    let /** @type {?} */ degrees = Math.round(radians * 180 / Math.PI);\n    const /** @type {?} */ degMod = degrees % step;\n    if (degMod >= step / 2) {\n      degrees = degrees + (step - degMod);\n    } else if (degMod < step / 2) {\n      degrees = degrees - degMod;\n    }\n    return degrees;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AtpCoreService_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpCoreService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpCoreService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { IClockNumber, IDisplayPreference, TimePickerConfig } from '../definitions';\nimport { AtpCoreService } from '../atp-core.service';\nimport { ITime } from '../definitions';\nexport class TimePickerComponent implements OnInit {\n\n  _ref: any;\npublic subject: any = null;\npublic activeModal = false;\npublic timerElement: any;\npublic clockObject: Array<any>;\npublic isClicked: boolean;\npublic clockType: 'minute' | 'hour' = 'hour';\npublic time: ITime = {\n    ampm: 'AM',\n    minute: 0,\n    hour: 12\n  };\npublic nowTime: any = this.time.hour;\npublic degree: any;\npublic config: TimePickerConfig;\npublic appRef: any;\npublic isPopup = true;\npublic allowed: any;\npublic preference: IDisplayPreference;\n/**\n * @param {?} core\n */\nconstructor(\nprivate core: AtpCoreService\n  ) { }\n/**\n * @param {?} time\n * @return {?}\n */\npublic ParseStringToTime (time: string): void {\n    time = (time === '' || time === undefined || time === null) ? this.time.hour + ':' + this.time.minute : time;\n    this.time = this.core.StringToTime(time);\n  }\n/**\n * @return {?}\n */\npublic GetTime () {\n    const /** @type {?} */ time = this.core.TimeToString(this.time);\n    this.subject.next(time);\n  }\n\n  clockMaker = () => {\n    const /** @type {?} */ type = this.clockType;\n    this.clockObject = this.core.ClockMaker(type);\n    this.setArrow(null);\n  }\n\n  setActiveTime = () => {\n    this.nowTime = (this.clockType === 'minute' ? this.time.minute : this.time.hour);\n  }\n\n  setArrow = (obj: any) => {\n    if (obj) {\n      this.clockType = obj.type;\n      if (this.clockType === 'minute') {\n        this.time.minute = obj.time;\n      } else {\n        this.time.hour = obj.time;\n      }\n    }\n    const /** @type {?} */ step = (this.clockType === 'minute') ? 6 : 30;\n    const /** @type {?} */ time = (this.clockType === 'minute') ? this.time.minute : this.time.hour;\n    const /** @type {?} */ degrees = time * step;\n    this.rotationClass(degrees);\n    this.setActiveTime();\n  }\n\n  rotationClass = (degrees: any) => {\n    this.degree = degrees;\n  }\n/**\n * @return {?}\n */\nsetTime() {\n    this.isClicked = false;\n    if (this.config.changeToMinutes && this.clockType === 'hour') {\n      this.clockType = 'minute';\n      this.clockMaker();\n    }\n  }\n\n  getDegree = (ele: any) => {\n    const /** @type {?} */ step = this.clockType === 'minute' ? 6 : 30;\n    const /** @type {?} */ parrentPos = ele.currentTarget.getBoundingClientRect();\n    if (this.isClicked && (ele.currentTarget === ele.target || ele.target.nodeName === 'BUTTON')) {\n      const /** @type {?} */ clock = {\n        width: ele.currentTarget.offsetWidth,\n        height: ele.currentTarget.offsetHeight\n      };\n      const /** @type {?} */ degrees = this.core.CalcDegrees(ele, parrentPos, step);\n      let /** @type {?} */ hour = this.time.hour, /** @type {?} */\n          minute = this.time.minute;\n\n      if (this.clockType === 'hour') {\n        hour = (degrees / step);\n        hour = (hour > 12) ? hour - 12 : hour;\n      } else if (this.clockType === 'minute') {\n        minute = (degrees / step);\n        minute = (minute > 59) ? minute - 60 : minute;\n      }\n\n      const /** @type {?} */ min = this.config.rangeTime.start, /** @type {?} */\n            max = this.config.rangeTime.end;\n\n      const /** @type {?} */ nowMinHour = +min.split(':')[0] < 12 ? +min.split(':')[0] : +min.split(':')[0] - 12;\n      const /** @type {?} */ nowMaxHour = +max.split(':')[0] < 12 ? +max.split(':')[0] : +max.split(':')[0] - 12;\n      const /** @type {?} */ nowMinMin = +min.split(':')[1];\n      const /** @type {?} */ nowMaxMin = +max.split(':')[1];\n\n      const /** @type {?} */ nowTime = this.GetNowTime(hour, this.time.ampm, minute);\n      if (this.allowed.indexOf(nowTime) > -1) {\n        this.time.hour = hour;\n        this.time.minute = minute;\n        this.rotationClass(degrees);\n        this.setActiveTime();\n      }else if (this.clockType === 'hour' && (hour === nowMinHour && minute <= nowMinMin)) {\n        this.time.hour = nowMinHour;\n        this.time.minute = nowMinMin;\n      }else if (this.clockType === 'hour' && (hour === nowMaxHour && minute >= nowMaxMin)) {\n        this.time.hour = nowMaxHour;\n        this.time.minute = nowMaxMin;\n      }\n    }\n  }\n/**\n * @param {?} hour\n * @param {?} ampm\n * @param {?} minute\n * @return {?}\n */\nprivate GetNowTime (hour: number, ampm: 'AM' | 'PM', minute: number): string {\n    const /** @type {?} */ Hour = (hour === 12 && ampm === 'AM') ? '0' : hour;\n    const /** @type {?} */ nowTime = Hour + ':' + minute + ' ' + ampm;\n    return nowTime;\n  }\n/**\n * @return {?}\n */\ncheckBet() {\n    const /** @type {?} */ nowTime = this.GetNowTime(this.time.hour, this.time.ampm, this.time.minute);\n    if (this.allowed.indexOf(nowTime) === -1) {\n      this.ParseStringToTime(this.config.rangeTime.start);\n      this.setArrow(null);\n      this.setActiveTime();\n    }\n  }\n/**\n * @return {?}\n */\nmodalAnimation() {\n    setTimeout(() => {\n      this.activeModal = true;\n    }, 1);\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.allowed = this.core.allowedTimes (this.config.rangeTime.start, this.config.rangeTime.end);\n    if (this.config && this.config.onlyMinute) {\n      this.clockType = 'minute';\n    }\n    if (this.config && this.config.onlyPM) {\n      this.time.ampm = 'PM';\n    }\n    this.clockMaker();\n    this.modalAnimation();\n  }\n/**\n * @return {?}\n */\npublic MinuteClick () {\n    /**\n     * We are not permitting user to select the minute.\n     * but anyway, it will return the standard time, if provided the default time.\n     */\n    if (this.config && this.config.onlyHour) {\n      return false;\n    }\n    this.clockType = 'minute';\n    this.clockMaker();\n  }\n/**\n * @return {?}\n */\npublic HourClick () {\n    /**\n     * We are not permitting user to select the minute.\n     * but anyway, it will return the standard time, if provided the default time.\n     */\n    if (this.config && this.config.onlyMinute) {\n      return false;\n    }\n    this.clockType = 'hour';\n    this.clockMaker();\n  }\n/**\n * @return {?}\n */\nSetAM () {\n    if (this.config && this.config.onlyPM) {\n      return false;\n    }\n    this.time.ampm = 'AM';\n    this.checkBet();\n  }\n/**\n * @return {?}\n */\nSetPM () {\n    if (this.config && this.config.onlyAM) {\n      return false;\n    }\n    this.time.ampm = 'PM';\n    this.checkBet();\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nClose(e: any) {\n    if (e.target === e.currentTarget) {\n      if (this.isPopup === true) {\n        this.activeModal = false;\n        setTimeout(() => {\n          this.appRef.detachView(this._ref.hostView);\n          this._ref.destroy();\n        }, 400);\n      }\n    }\n  }\n/**\n * @return {?}\n */\npublic GetSeparator () {\n    if (this.preference && this.preference.separator) {\n      return this.preference.separator;\n    }\n    return ':';\n  }\n/**\n * @param {?} period\n * @return {?}\n */\npublic GetPeriod (period: 'AM' | 'PM') {\n    if (this.preference && this.preference.period) {\n      return this.preference.period(period);\n    }\n    return period;\n  }\n/**\n * @return {?}\n */\npublic GetMinute () {\n    if (this.preference && this.preference.minute) {\n      return this.preference.minute(this.time.minute);\n    }\n    let /** @type {?} */ min: string = this.time.minute.toString();\n    if (+min < 10) {\n      min = '0' + min;\n    }\n    return min;\n  }\n/**\n * @return {?}\n */\npublic GetHour () {\n    if (this.preference && this.preference.hour) {\n      return this.preference.hour(this.time.hour);\n    }\n    return this.time.hour;\n  }\n/**\n * @param {?} clock\n * @return {?}\n */\npublic GetClockTime(clock: IClockNumber) {\n    if ( ! this.preference) {\n      return clock.time;\n    }\n    if ( this.clockType === 'hour' && this.preference.clockHour) {\n      return this.preference.clockHour(clock.time);\n    }\n    if ( this.clockType === 'minute' && this.preference.clockMinute) {\n      return this.preference.clockMinute(clock.time);\n    }\n    return clock.time;\n  }\n/**\n * @param {?} key\n * @return {?}\n */\npublic GetLabel (key: string) {\n    const /** @type {?} */ defaults = {\n      'ok': 'Ok',\n      'cancel': 'Cancel'\n    };\n    if ((this.preference && this.preference.labels && this.preference.labels.ok)) {\n      defaults.ok = this.preference.labels.ok;\n    }\n    if ((this.preference && this.preference.labels && this.preference.labels.cancel)) {\n      defaults.cancel = this.preference.labels.cancel;\n    }\n    return defaults[key];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'time-picker',\n  template: `\n    <div id=\"time-picker-wrapper\" class=\"{{config.theme}}\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\" (click)=\"Close($event);\">\n      <div id=\"time-picker\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\">\n        <div class=\"time-picker-header\">\n          <div class=\"time-picker-selected-time\">\n              <div class=\"time-picker-hour\" (click)=\"HourClick()\" [attr.disabled]=\"(config.onlyMinute) ? 'disabled' : null\"\n                [ngClass]=\"{'selected' : clockType == 'hour'}\">{{GetHour()}}</div>\n              <span class=\"time-seprator\">{{GetSeparator()}}</span>\n              <div class=\"time-picker-minute\" (click)=\"MinuteClick();\" [attr.disabled]=\"(config.onlyHour) ? 'disabled' : null\"\n                [ngClass]=\"{'selected' : clockType == 'minute'}\">{{GetMinute()}}</div>\n          </div>\n          <div class=\"time-picker-selected-ampm\">\n            <div class=\"time-picker-am\" (click)=\"SetAM();\" [attr.disabled]=\"(config.onlyPM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'AM'}\">{{GetPeriod('AM')}}</div>\n            <div class=\"time-picker-pm\" (click)=\"SetPM();\" [attr.disabled]=\"(config.onlyAM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'PM'}\">{{GetPeriod('PM')}}</div>\n\n          </div>\n        </div>\n        <div class=\"time-picker-content\">\n            <div class=\"time-picker-clock\" (mousemove)=\"getDegree($event);\" (mousedown)=\"isClicked=true; getDegree($event);\" (mouseup)=\"setTime()\">\n              <button *ngFor=\"let clock of clockObject\" [ngClass]=\"{'active' : nowTime == clock.time}\" \n                [id]=\"'timepicker-item-id-' + clock.time\" \n                [ngStyle]=\"{top: clock.top,left: clock.left, color: nowTime == clock.time ? config.arrowStyle.color :  '', background: nowTime == clock.time ? config.arrowStyle.background : 'transparent'}\">\n                {{GetClockTime(clock)}}\n              </button>\n              <div class=\"time-picker-clock-origin\" [ngStyle]=\"{ background: config.arrowStyle.background}\"></div>\n              <div id=\"tpc-arrow\" class=\"time-picker-clock-arrow\" [ngStyle]=\"{transform: 'rotate(' + this.degree + 'deg)','-webkit-transform': 'rotate(' + this.degree + 'deg)', background: config.arrowStyle.background}\">\n                <span [ngStyle]=\"{ background: config.arrowStyle.background }\"></span>\n              </div>\n            </div>\n        </div>\n        <div class=\"time-picker-footer\">\n            <button (click)=\"Close($event);\">{{GetLabel('cancel')}}</button>\n            <button (click)=\"GetTime();Close($event);\" class=\"atp-ref-dialog-close\">{{GetLabel('ok')}}</button>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    #time-picker-wrapper {\n      position: fixed;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      background: transparent;\n      -webkit-transition: background 0.4s;\n      transition: background 0.4s;\n      font-family: 'Roboto', sans-serif;\n      z-index: 1000; }\n      #time-picker-wrapper.static {\n        position: relative !important;\n        background: transparent !important;\n        display: inline-block;\n        z-index: 0; }\n      #time-picker-wrapper.active {\n        background: rgba(0, 0, 0, 0.3); }\n      #time-picker-wrapper.dark #time-picker {\n        background: #424242; }\n        #time-picker-wrapper.dark #time-picker .time-picker-header {\n          border-bottom: none;\n          background: #555555; }\n          #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time {\n            color: #999; }\n            #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: #999; }\n            #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.dark #time-picker .time-picker-clock {\n          background: #555555; }\n          #time-picker-wrapper.dark #time-picker .time-picker-clock > button {\n            color: #fff; }\n        #time-picker-wrapper.dark #time-picker .time-picker-footer {\n          border-top: none; }\n          #time-picker-wrapper.dark #time-picker .time-picker-footer button {\n            background: #555555;\n            color: #fff; }\n            #time-picker-wrapper.dark #time-picker .time-picker-footer button:hover {\n              background: #777; }\n      #time-picker-wrapper.light #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.light #time-picker .time-picker-header {\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time {\n            color: #aaa; }\n            #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #000; }\n          #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: #aaa; }\n            #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #000; }\n        #time-picker-wrapper.light #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock > button.active {\n              background: blue;\n              color: #fff; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: blue; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: blue; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: blue; }\n        #time-picker-wrapper.light #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.light #time-picker .time-picker-footer button {\n            background: #f1f1f1; }\n            #time-picker-wrapper.light #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-green #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-header {\n          background-color: #00897b;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock > button.active {\n              background: #00897b;\n              color: #fff; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #00897b; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #00897b; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #00897b; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #00897b; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-blue #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-header {\n          background-color: #3F51B5;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock > button.active {\n              background: #3F51B5;\n              color: #fff; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #3F51B5; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #3F51B5; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #3F51B5; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #3F51B5; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-red #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-header {\n          background-color: #F44336;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock > button.active {\n              background: #F44336;\n              color: #fff; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #F44336; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #F44336; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #F44336; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #F44336; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-purple #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-header {\n          background-color: #9C27B0;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock > button.active {\n              background: #9C27B0;\n              color: #fff; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #9C27B0; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #9C27B0; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #9C27B0; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #9C27B0; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-orange #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-header {\n          background-color: #FF9800;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock > button.active {\n              background: #FF9800;\n              color: #fff; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #FF9800; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #FF9800; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #FF9800; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #FF9800; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper #time-picker {\n        width: 325px;\n        height: auto;\n        -webkit-box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n                box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n        border-radius: 2px;\n        margin: 15vh auto !important;\n        -webkit-transform: scale(0.5) !important;\n                transform: scale(0.5) !important;\n        -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;\n        transition: opacity 0.3s, -webkit-transform 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s, -webkit-transform 0.3s;\n        opacity: 0; }\n        #time-picker-wrapper #time-picker.static {\n          margin: 0px !important;\n          -webkit-box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 0 7px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n                  box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 0 7px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12); }\n        #time-picker-wrapper #time-picker.active {\n          -webkit-transform: scale(1) !important;\n                  transform: scale(1) !important;\n          opacity: 1; }\n        #time-picker-wrapper #time-picker .time-picker-header {\n          text-align: center;\n          padding: 15px 0px; }\n          #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time {\n            font-size: 35px;\n            padding: 5px 0px; }\n            #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div {\n              display: inline-block;\n              cursor: pointer; }\n              #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div[disabled=true] {\n                cursor: default; }\n          #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm {\n            font-size: 18px; }\n            #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div {\n              display: inline-block;\n              padding: 0 5px;\n              cursor: pointer; }\n              #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div[disabled=true] {\n                cursor: default; }\n        #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock {\n          width: 200px;\n          height: 200px;\n          padding: 24px;\n          border-radius: 50%;\n          cursor: pointer;\n          margin: 25px auto;\n          position: relative;\n          user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          -webkit-user-select: none; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock button {\n            border: none;\n            position: absolute;\n            width: 35px;\n            height: 35px;\n            border-radius: 50%;\n            cursor: pointer;\n            font-size: 17px;\n            text-align: center;\n            padding: 0;\n            -webkit-transition: all .2s;\n            transition: all .2s;\n            z-index: 3; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-origin {\n            width: 6px;\n            height: 6px;\n            border-radius: 50%;\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            margin-left: -3px;\n            margin-top: -3px; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow {\n            width: 2px;\n            height: 41%;\n            position: absolute;\n            left: 0;\n            top: 22px;\n            right: 0;\n            margin: auto;\n            -webkit-transform-origin: top left;\n            transform-origin: bottom; }\n            #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow span {\n              width: 8px;\n              height: 8px;\n              border-radius: 50%;\n              position: absolute;\n              top: 0;\n              right: -3px; }\n        #time-picker-wrapper #time-picker .time-picker-footer {\n          padding: 15px;\n          text-align: right; }\n          #time-picker-wrapper #time-picker .time-picker-footer button {\n            border: transparent;\n            margin-left: 10px;\n            padding: 10px;\n            font-size: 14px;\n            border-radius: 2px;\n            cursor: pointer; }\n\n    * {\n      outline: none;\n      -webkit-box-sizing: content-box;\n              box-sizing: content-box; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AtpCoreService, },\n];\n}\n\nfunction TimePickerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTimePickerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTimePickerComponent.ctorParameters;\n/** @type {?} */\nTimePickerComponent.prototype._ref;\n/** @type {?} */\nTimePickerComponent.prototype.subject;\n/** @type {?} */\nTimePickerComponent.prototype.activeModal;\n/** @type {?} */\nTimePickerComponent.prototype.timerElement;\n/** @type {?} */\nTimePickerComponent.prototype.clockObject;\n/** @type {?} */\nTimePickerComponent.prototype.isClicked;\n/** @type {?} */\nTimePickerComponent.prototype.clockType;\n/** @type {?} */\nTimePickerComponent.prototype.time;\n/** @type {?} */\nTimePickerComponent.prototype.nowTime;\n/** @type {?} */\nTimePickerComponent.prototype.degree;\n/** @type {?} */\nTimePickerComponent.prototype.config;\n/** @type {?} */\nTimePickerComponent.prototype.appRef;\n/** @type {?} */\nTimePickerComponent.prototype.isPopup;\n/** @type {?} */\nTimePickerComponent.prototype.allowed;\n/** @type {?} */\nTimePickerComponent.prototype.preference;\n/** @type {?} */\nTimePickerComponent.prototype.clockMaker;\n/** @type {?} */\nTimePickerComponent.prototype.setActiveTime;\n/** @type {?} */\nTimePickerComponent.prototype.setArrow;\n/** @type {?} */\nTimePickerComponent.prototype.rotationClass;\n/** @type {?} */\nTimePickerComponent.prototype.getDegree;\n/** @type {?} */\nTimePickerComponent.prototype.core;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; });\n}","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n\n  public readonly name = 'UnsubscriptionError';\n\n  constructor(public errors: any[]) {\n    super(errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (Object as any).setPrototypeOf(this, UnsubscriptionError.prototype);\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export const rxSubscriber =\n  (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n          // node_modules, we cannot rely on `instanceof` checks\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```javascript\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```javascript\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```javascript\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<R>(...operations: OperatorFunction<any, any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```javascript\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n\n  public readonly name = 'ObjectUnsubscribedError';\n\n  constructor() {\n    super('object unsubscribed');\n    (Object as any).setPrototypeOf(this, ObjectUnsubscribedError.prototype);\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * ##Examples\n * Group objects by id and return as array\n * ```javascript\n * of<Obj>(\n *   {id: 1, name: 'aze1'},\n *   {id: 2, name: 'sf2'},\n *   {id: 2, name: 'dg2'},\n *   {id: 1, name: 'erg1'},\n *   {id: 1, name: 'df1'},\n *   {id: 2, name: 'sfqfb2'},\n *   {id: 3, name: 'qfs3'},\n *   {id: 2, name: 'qsgqsfg2'},\n * ).pipe(\n *   groupBy(p => p.id),\n *   flatMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], []))),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n * ```\n *\n * Pivot data on the id field\n * ```javascript\n * of<Obj>(\n *   {id: 1, name: 'aze1'},\n *   {id: 2, name: 'sf2'},\n *   {id: 2, name: 'dg2'},\n *   {id: 1, name: 'erg1'},\n *   {id: 1, name: 'df1'},\n *   {id: 2, name: 'sfqfb2'},\n *   {id: 3, name: 'qfs1'},\n *   {id: 2, name: 'qsgqsfg2'},\n * ).pipe(\n *   groupBy(p => p.id, p => p.name),\n *   flatMap( (group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))),\n *   map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)})),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n * ```\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T | R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map<K, Subject<T | R>>();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = (this.subjectSelector ? this.subjectSelector() : new Subject<R>()) as Subject<T | R>;\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T | any>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  /** @deprecated Do not construct this type. Internal use only */\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const { refCountSubscription, groupSubject } = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport class Scheduler implements SchedulerLike {\n\n  /** @nocollapse */\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport class AsyncScheduler extends Scheduler {\n  public static delegate?: Scheduler;\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @deprecated internal use only\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @deprecated internal use only\n   */\n  public scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    super(SchedulerAction, () => {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    });\n  }\n\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return super.schedule(work, delay, state);\n    }\n  }\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```javascript\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```javascript\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```javascript\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```javascript\n * const interval$ = interval(1000);\n * result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nexport function emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nimport { Observable } from '../Observable';\n\nexport function of<T>(a: T, scheduler?: SchedulerLike): Observable<T>;\nexport function of<T, T2>(a: T, b: T2, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n  } else {\n    scheduler = undefined;\n  }\n  switch (args.length) {\n    case 0:\n      return empty(scheduler);\n    case 1:\n      return scheduler ? fromArray(args as T[], scheduler) : scalar(args[0] as T);\n    default:\n      return fromArray(args as T[], scheduler);\n  }\n}\n","import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Observable } from '../Observable';\n\nexport function scalar<T>(value: T) {\n  const result = new Observable<T>(subscriber => {\n    subscriber.next(value);\n    subscriber.complete();\n  });\n  result._isScalar = true;\n  (result as any).value = value;\n  return result;\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```javascript\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n * ```javascript\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13\n * ```javascript\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13\n *     ? throwError('Thirteens are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n * ```\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n","import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```javascript\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { SchedulerLike } from './types';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: (ReplayEvent<T> | T)[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n  private _infiniteTimeWindow: boolean = false;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: SchedulerLike) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n\n    if (windowTime === Number.POSITIVE_INFINITY) {\n      this._infiniteTimeWindow = true;\n      this.next = this.nextInfiniteTimeWindow;\n    } else {\n      this.next = this.nextTimeWindow;\n    }\n  }\n\n  private nextInfiniteTimeWindow(value: T): void {\n    const _events = this._events;\n    _events.push(value);\n    // Since this method is invoked in every next() call than the buffer\n    // can overgrow the max size only by one item\n    if (_events.length > this._bufferSize) {\n      _events.shift();\n    }\n\n    super.next(value);\n  }\n\n  private nextTimeWindow(value: T): void {\n    this._events.push(new ReplayEvent(this._getNow(), value));\n    this._trimBufferThenGetEvents();\n\n    super.next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n    const _infiniteTimeWindow = this._infiniteTimeWindow;\n    const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    const len = _events.length;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.isStopped || this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    if (_infiniteTimeWindow) {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next(<T>_events[i]);\n      }\n    } else {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next((<ReplayEvent<T>>_events[i]).value);\n      }\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = <ReplayEvent<T>[]>this._events;\n\n    const eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","let nextHandle = 1;\n\nconst tasksByHandle: { [handle: string]: () => void } = {};\n\nfunction runIfPresent(handle: number) {\n  const cb = tasksByHandle[handle];\n  if (cb) {\n    cb();\n  }\n}\n\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    tasksByHandle[handle] = cb;\n    Promise.resolve().then(() => runIfPresent(handle));\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    delete tasksByHandle[handle];\n  },\n};\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(\n      () => scheduler.flush(null)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```javascript\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```javascript\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```javascript\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction as any,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```javascript\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.animationFrame.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n * ```\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n\n  public readonly name = 'ArgumentOutOfRangeError';\n\n  constructor() {\n    super('argument out of range');\n    (Object as any).setPrototypeOf(this, ArgumentOutOfRangeError.prototype);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n\n  public readonly name = 'EmptyError';\n\n  constructor() {\n    super('no elements in sequence');\n    (Object as any).setPrototypeOf(this, EmptyError.prototype);\n  }\n}\n","/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nexport class TimeoutError extends Error {\n\n  public readonly name = 'TimeoutError';\n\n  constructor() {\n    super('Timeout has occurred');\n    (Object as any).setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>) => {\n  if (result instanceof Observable) {\n    return (subscriber: Subscriber<T>) => {\n        if (result._isScalar) {\n        subscriber.next((result as any).value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","export function isPromise(value: any): value is PromiseLike<any> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = iterable[Symbol_iterator]();\n  do {\n    const item = iterator.next();\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","\nimport { ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeTo } from './subscribeTo';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription | void {\n  const destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  return subscribeTo(result)(destination);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler  } from '../util/isScheduler';\nimport { isArray  } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Operator } from '../Operator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\n\nconst NONE = {};\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: SchedulerLike): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: SchedulerLike): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R, scheduler?: SchedulerLike): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | SchedulerLike>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n * ## Examples\n * ### Combine two timer Observables\n * ```javascript\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n *\n * ### Combine an array of Observables\n * ```javascript\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000),   // emit 0 and then emit n after n seconds\n *     startWith(0),\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n *\n * ### Use project function to dynamically calculate the Body-Mass Index\n * ```javascript\n * * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest(weight, height).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    SchedulerLike>): Observable<R> {\n  let resultSelector: (...values: Array<any>) => R =  null;\n  let scheduler: SchedulerLike = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <SchedulerLike>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator<T, R>(resultSelector));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private resultSelector?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private resultSelector?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryResultSelector(values: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable } from '../Observable';\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { ObservableInput, PartialObserver } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zip<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zip<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zip<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zip<R>(array: ObservableInput<any>[]): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R): Observable<R>;\n\nexport function zip<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zip<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n * Combine age and name from different sources\n * ```javascript\n * let age$ = of<number>(27, 25, 29);\n * let name$ = of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = of<boolean>(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map((age: number, name: string, isDev: boolean) => ({ age, name, isDev })),\n * )\n * .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const resultSelector = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n  return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  resultSelector: (...values: Array<any>) => R;\n\n  constructor(resultSelector?: (...values: Array<any>) => R) {\n    this.resultSelector = resultSelector;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private resultSelector: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              resultSelector?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.resultSelector) {\n      this._tryresultSelector(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryresultSelector(args: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```javascript\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<R>, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\n/* tslint:disable:max-line-length */\n// forkJoin([a$, b$, c$]);\nexport function forkJoin<T>(sources: [ObservableInput<T>]): Observable<T[]>;\nexport function forkJoin<T, T2>(sources: [ObservableInput<T>, ObservableInput<T2>]): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>]): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>]): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>]): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>, ObservableInput<T6>]): Observable<[T, T2, T3, T4, T5, T6]>;\nexport function forkJoin<T>(sources: Array<ObservableInput<T>>): Observable<T[]>;\n\n// forkJoin(a$, b$, c$)\nexport function forkJoin<T>(v1: ObservableInput<T>): Observable<T[]>;\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Joins last values emitted by passed Observables.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * <img src=\"./img/forkJoin.png\" width=\"100%\">\n *\n * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n * or directly as arguments. If no input Observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first Observable,\n * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n * not emit more than once and it will complete after that. If you need to emit combined values not only\n * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input Observables, whenever any of\n * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other Observables.\n * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other Observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * Observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output Observable is supposed to emit a result.\n *\n * ## Examples\n * ### Use forkJoin with operator emitting immediately\n * ```javascript\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin(\n *   of(1, 2, 3, 4),\n *   of(5, 6, 7, 8),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [4, 8]\n * // \"This is how it ends!\"\n * ```\n *\n * ### Use forkJoin with operator emitting after some time\n * ```javascript\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [2, 3] after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with project function\n * ```javascript\n * import { jorkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * ).pipe(\n *   map(([n, m]) => n + m),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // 5 after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin<T>(\n  ...sources: Array<ObservableInput<T> | ObservableInput<T>[] | Function>\n): Observable<T[]> {\n\n  let resultSelector: Function;\n  if (typeof sources[sources.length - 1] === 'function') {\n    // DEPRECATED PATH\n    resultSelector = sources.pop() as Function;\n  }\n\n  // if the first and only other argument is an array\n  // assume it's been called with `forkJoin([obs1, obs2, obs3])`\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0] as Array<ObservableInput<T>>;\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return forkJoin(sources).pipe(\n      map(args => resultSelector(...args))\n    );\n  }\n\n  return new Observable(subscriber => {\n    return new ForkJoinSubscriber(subscriber, sources as Array<ObservableInput<T>>);\n  });\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T, R> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private values: T[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<R>,\n              private sources: Array<ObservableInput<T>>) {\n    super(destination);\n\n    const len = sources.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(innerSub as any)._hasValue) {\n      (innerSub as any)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const { destination, haveValues, values } = this;\n    const len = values.length;\n\n    if (!(innerSub as any)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      destination.next(values);\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```javascript\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable as any, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Component, ViewChild, ViewContainerRef, Output, ComponentFactoryResolver, OnInit, ApplicationRef, EventEmitter\n} from '@angular/core';\nimport { TimePickerComponent } from '../time-picker/time-picker.component';\nimport { TimePickerConfig } from '../definitions';\nimport { Subject } from 'rxjs';\nexport class AtpTimePickerComponent implements OnInit {\n   container: ViewContainerRef;\n   timeSelected: EventEmitter<string> = new EventEmitter<string>();\npublic config: TimePickerConfig = {};\n/**\n * @param {?} resolver\n * @param {?} appRef\n */\nconstructor(\nprivate resolver: ComponentFactoryResolver,\nprivate appRef: ApplicationRef,\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    let /** @type {?} */ config = this.config;\n    config = {\n      time: config.time || '00:00',\n      theme: ['light', 'dark', 'material'].indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n      rangeTime: config.rangeTime || {start: '0:0', end: '24:0'},\n      arrowStyle: config.arrowStyle || {}\n    };\n    config.arrowStyle = {\n      background: (config.arrowStyle.background) ?\n      config.arrowStyle.background : config.theme !== undefined ?\n      config.theme === 'dark' ? 'rgb(128, 203, 196)' : 'blue' : 'blue',\n      color: config.arrowStyle.color || '#fff'\n    };\n    const /** @type {?} */ cfr = this.resolver.resolveComponentFactory(TimePickerComponent);\n    const /** @type {?} */ tsc = this.container.createComponent(cfr);\n    tsc.instance.subject = new Subject<any>();\n    tsc.instance._ref = tsc;\n    tsc.instance.appRef = this.appRef;\n    tsc.instance.timerElement = '';\n    tsc.instance.config = config;\n    tsc.instance.activeModal = true;\n    tsc.instance.isPopup = false;\n    tsc.instance.ParseStringToTime(config.time);\n    tsc.instance.subject.asObservable().subscribe(time => {\n      this.timeSelected.emit(time);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'atp-time-picker',\n  template: `\n    <div #container></div>\n  `,\n  styles: [`\n    .atp-time-picker .icon-container {\n      display: inline-block;\n      margin-right: .2em; }\n      .atp-time-picker .icon-container svg {\n        cursor: pointer;\n        position: relative;\n        top: .5em; }\n      .atp-time-picker .icon-container /deep/ i {\n        cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'container': [{ type: ViewChild, args: ['container', { read: ViewContainerRef }, ] },],\n'timeSelected': [{ type: Output },],\n};\n}\n\nfunction AtpTimePickerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpTimePickerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpTimePickerComponent.ctorParameters;\n/** @type {?} */\nAtpTimePickerComponent.propDecorators;\n/** @type {?} */\nAtpTimePickerComponent.prototype.container;\n/** @type {?} */\nAtpTimePickerComponent.prototype.timeSelected;\n/** @type {?} */\nAtpTimePickerComponent.prototype.config;\n/** @type {?} */\nAtpTimePickerComponent.prototype.resolver;\n/** @type {?} */\nAtpTimePickerComponent.prototype.appRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IDisplayPreference } from './definitions';\n\nconst /** @type {?} */ arabic = new Intl.NumberFormat('ar-AE');\nconst /** @type {?} */ persian = new Intl.NumberFormat('fa-IR');\n\nexport const /** @type {?} */ PersianPreference: IDisplayPreference = {\n  hour: (x) => persian.format(x),\n  minute: (x) => {\n    let /** @type {?} */ exp = persian.format(x);\n    if (exp.length === 1) {\n      exp = persian.format(0) + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? 'صبح' : 'عصر',\n  clockHour: (x) => persian.format(x),\n  clockMinute: (x) => persian.format(x),\n  labels: {\n    ok: 'تایید',\n    cancel: 'لغو'\n  }\n};\n\nexport const /** @type {?} */ ArabicPreference: IDisplayPreference = {\n  hour: (x) => arabic.format(x),\n  minute: (x) => {\n    let /** @type {?} */ exp = arabic.format(x);\n    if (exp.length === 1) {\n      exp = arabic.format(0) + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? 'صباحا' : 'مساء',\n  clockHour: (x) => arabic.format(x),\n  clockMinute: (x) => arabic.format(x),\n  labels: {\n    ok: 'حسنا',\n    cancel: 'إلغاء'\n  }\n};\n\nexport const /** @type {?} */ ChinesePreference: IDisplayPreference = {\n  hour:  (x) => x,\n  minute: (x) => {\n    let /** @type {?} */ exp = x;\n    if (exp.length === 1) {\n      exp = '۰' + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? '上午' : '下午',\n  clockHour: (x) => x,\n  clockMinute: (x) => x,\n  labels: {\n    ok: '好',\n    cancel: '取消'\n  }\n};\n\nexport const /** @type {?} */ Preference = (locale: string): IDisplayPreference => {\n  switch (locale) {\n    case 'fa':\n        return PersianPreference;\n    case 'ar':\n        return ArabicPreference;\n    case 'ch':\n        return ChinesePreference;\n    default:\n      return null;\n  }\n};\n","import { Injectable, ViewContainerRef, Injector, ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef } from '@angular/core';\nimport { TimePickerComponent } from './time-picker/time-picker.component';\nimport { TimePickerConfig, IDialogResult } from './definitions';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { Preference } from './preferences';\nexport class AmazingTimePickerService {\n/**\n * @param {?} resolver\n * @param {?} appRef\n * @param {?} injector\n */\nconstructor (\nprivate resolver: ComponentFactoryResolver,\nprivate appRef: ApplicationRef,\nprivate injector: Injector\n  ) {}\n/**\n * @param {?=} config\n * @return {?}\n */\nopen (config?: TimePickerConfig): IDialogResult {\n    const /** @type {?} */ thems = ['light', 'dark', 'material-red', 'material-green', 'material-blue', 'material-purple', 'material-orange'];\n    const /** @type {?} */ _self = this;\n    config = config || {};\n    config = /** @type {?} */(( {\n      time: config.time || '00:00',\n      theme: thems.indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n      rangeTime: config.rangeTime || {start: '0:0', end: '24:0'},\n      arrowStyle: config.arrowStyle || {},\n      locale: config.locale || 'en',\n      changeToMinutes: config.changeToMinutes || false,\n      preference: config.preference || null,\n      onlyHour: config.onlyHour || false,\n      onlyMinute: config.onlyMinute || false,\n      onlyAM: config.onlyAM || false,\n      onlyPM: config.onlyPM || false,\n    } as TimePickerConfig));\n    config.rangeTime = {\n      start: config.rangeTime.start || '0:0',\n      end: config.rangeTime.end || '24:0',\n    };\n    config.arrowStyle = {\n      background: (config.arrowStyle.background) ?\n      config.arrowStyle.background : config.theme !== undefined ?\n      config.theme === 'dark' ? 'rgb(128, 203, 196)' : '' : '',\n      color: config.arrowStyle.color || ''\n    };\n    const /** @type {?} */ componentRef = this.resolver.resolveComponentFactory(TimePickerComponent);\n    const /** @type {?} */ tsc = componentRef.create(this.injector);\n    this.appRef.attachView(tsc.hostView);\n    const /** @type {?} */ domElem = /** @type {?} */(( ( /** @type {?} */((tsc.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n    document.body.appendChild(domElem);\n    tsc.instance.subject = new Subject<any>();\n    tsc.instance._ref = tsc;\n    tsc.instance.appRef = this.appRef;\n    tsc.instance.timerElement = '';\n    tsc.instance.config = config;\n    if (config.preference) {\n      tsc.instance.preference = config.preference;\n    } else {\n      tsc.instance.preference = Preference(config.locale);\n    }\n    tsc.instance.ParseStringToTime(config.time);\n    return {\n      afterClose: function () {\n        return tsc.instance.subject.asObservable();\n      }\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n{type: Injector, },\n];\n}\n\nfunction AmazingTimePickerService_tsickle_Closure_declarations() {\n/** @type {?} */\nAmazingTimePickerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAmazingTimePickerService.ctorParameters;\n/** @type {?} */\nAmazingTimePickerService.prototype.resolver;\n/** @type {?} */\nAmazingTimePickerService.prototype.appRef;\n/** @type {?} */\nAmazingTimePickerService.prototype.injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, Output, EventEmitter, HostListener, ElementRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AmazingTimePickerService } from './atp-time-picker.service';\nexport class AtpDirective implements ControlValueAccessor {\n\n   myClick = new EventEmitter();\nprivate elementRef: ElementRef;\nprivate onChange = (x: any): void => {};\n/**\n * @param {?} viewContainerRef\n * @param {?} atp\n */\nconstructor(\npublic viewContainerRef: ViewContainerRef,\nprivate atp: AmazingTimePickerService) {\n    this.elementRef = this.viewContainerRef.element;\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nonClick(e) {\n    const /** @type {?} */ ele = this.viewContainerRef.element.nativeElement;\n    const /** @type {?} */ time = ele.value;\n    const /** @type {?} */ theme = ele.getAttribute('theme');\n    const /** @type {?} */ start = ele.getAttribute('start');\n    const /** @type {?} */ end = ele.getAttribute('end');\n    const /** @type {?} */ locale = ele.getAttribute('locale') || 'en';\n    const /** @type {?} */ changeToMinutes = ele.getAttribute('changeToMinutes') === 'true';\n    const /** @type {?} */ preference = ele.getAttribute('preference') || null;\n    const /** @type {?} */ onlyHour = ele.getAttribute('onlyHour') || false;\n    const /** @type {?} */ onlyMinute = ele.getAttribute('onlyMinute') || false;\n    const /** @type {?} */ onlyAM = ele.getAttribute('onlyAM') || false;\n    const /** @type {?} */ onlyPM = ele.getAttribute('onlyPM') || false;\n    let /** @type {?} */ arrowStyle = ele.getAttribute('arrowStyle');\n    arrowStyle = (arrowStyle) ? JSON.parse(arrowStyle.replace(new RegExp('\\'', 'g'), '\"')) : '';\n    const /** @type {?} */ timePickerFunction = this.atp.open({\n      time,\n      theme,\n      rangeTime: { start, end},\n      'arrowStyle': arrowStyle,\n      locale,\n      changeToMinutes,\n      onlyHour,\n      onlyMinute,\n      onlyAM,\n      onlyPM,\n      preference\n    });\n\n    timePickerFunction.afterClose().subscribe(retTime => {\n      this.writeValue(retTime); // update the native element\n      this.onChange(retTime); // update the form value (if there's a form)\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    if (this.elementRef) {\n      this.elementRef.nativeElement.value = value;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any) {\n    this.onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn) {  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[atp-time-picker]',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: AtpDirective,\n    multi: true\n  }]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: AmazingTimePickerService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'myClick': [{ type: Output },],\n'onClick': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\n\nfunction AtpDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpDirective.ctorParameters;\n/** @type {?} */\nAtpDirective.propDecorators;\n/** @type {?} */\nAtpDirective.prototype.myClick;\n/** @type {?} */\nAtpDirective.prototype.elementRef;\n/** @type {?} */\nAtpDirective.prototype.onChange;\n/** @type {?} */\nAtpDirective.prototype.viewContainerRef;\n/** @type {?} */\nAtpDirective.prototype.atp;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TimePickerComponent } from './time-picker/time-picker.component';\nimport { AtpTimePickerComponent } from './atp-time-picker/atp-time-picker.component';\nimport { AmazingTimePickerService } from './atp-time-picker.service';\nimport { AtpDirective } from './atp.directive';\nimport { AtpCoreService } from './atp-core.service';\nexport class AmazingTimePickerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TimePickerComponent,\n    AtpTimePickerComponent,\n    AtpDirective\n  ],\n  providers: [\n    AmazingTimePickerService,\n    AtpCoreService\n  ],\n  entryComponents: [TimePickerComponent],\n  exports: [\n    TimePickerComponent,\n    AtpTimePickerComponent,\n    AtpDirective\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AmazingTimePickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAmazingTimePickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAmazingTimePickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["AtpCoreService","prototype","allowedTimes","min","max","allTimes","nowMinHour","split","nowMaxHour","nowMinMin","nowMaxMin","i","j","jDest","hour","minute","ampm","push","ClockMaker","type","items","timeVal","timeStep","str","String","x","r","Math","sin","PI","y","cos","time","left","top","TimeToString","hh","StringToTime","_b","h","m","CalcDegrees","ele","parrentPos","step","targetX","currentTarget","offsetWidth","targetY","offsetHeight","Vx","round","clientX","Vy","clientY","radians","atan2","degrees","degMod","decorators","Injectable","ctorParameters","TimePickerComponent","core","_this","this","subject","activeModal","clockType","nowTime","isPopup","clockMaker","clockObject","setArrow","setActiveTime","obj","rotationClass","degree","getDegree","getBoundingClientRect","isClicked","target","nodeName","config","rangeTime","start","end","GetNowTime","allowed","indexOf","ParseStringToTime","undefined","GetTime","next","setTime","changeToMinutes","checkBet","modalAnimation","setTimeout","ngOnInit","onlyMinute","onlyPM","MinuteClick","onlyHour","HourClick","SetAM","SetPM","onlyAM","Close","e","appRef","detachView","_ref","hostView","destroy","GetSeparator","preference","separator","GetPeriod","period","GetMinute","toString","GetHour","GetClockTime","clock","clockHour","clockMinute","GetLabel","key","defaults","ok","cancel","labels","Component","args","selector","template","styles","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","isFunction","_enable_super_gross_mode_that_will_cause_bad_things","Promise","useDeprecatedSynchronousErrorHandling","value","error","Error","stack","hostReportError","err","empty","closed","complete","isObject","tryCatchTarget","tryCatcher","apply","arguments","errorObject","tryCatch","fn","UnsubscriptionError","_super","tslib_1.__extends","errors","call","length","map","join","name","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","flattenUnsubscriptionErrors","isArray","sub","concat","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","reduce","errs","rxSubscriber","Symbol","for","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","emptyObserver","rxSubscriberSymbol","trustedSubscriber","SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","Observable","subscribe","_isScalar","_subscribe","lift","operator","observable","source","sink","nextOrObserver","toSubscriber","_trySubscribe","forEach","promiseCtor","getPromiseCtor","resolve","reject","Symbol_observable","pipe","operations","_i","fns","input","prev","noop","toPromise","ObjectUnsubscribedError","SubjectSubscription","observers","subscriberIndex","SubjectSubscriber","Subject","hasError","AnonymousSubject","copy","slice","thrownError","asObservable","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableSubscriber","ConnectableObservable","subjectFactory","getSubject","_subject","_isComplete","GroupDurationSubscriber","GroupBySubscriber","keySelector","elementSelector","durationSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","Map","element","group","get","set","groupedObservable","GroupedObservable","duration","clear","removeGroup","delete","count","groupSubject","refCountSubscription","InnerRefCountSubscription","AsyncAction","BehaviorSubject","_value","defineProperty","getValue","configurable","scheduler","work","schedule","state","delay","id","recycleAsyncId","pending","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action","QueueAction","Scheduler","SchedulerAction","now","AsyncScheduler","delegate","active","scheduled","action","shift","queue","QueueScheduler","empty$1","subscribeToArray","array","fromArray","of","pop","result","scalar","dispatch","_a","Notification","kind","hasValue","observe","observer","do","accept","toObservable","throwError","createNext","undefinedValueNotification","createError","createComplete","completeNotification","ObserveOnSubscriber","arg","notification","scheduleMessage","ObserveOnMessage","ReplayEvent","ReplaySubject","bufferSize","windowTime","Number","POSITIVE_INFINITY","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextTimeWindow","nextInfiniteTimeWindow","_getNow","_trimBufferThenGetEvents","eventsCount","spliceCount","nextHandle","AsyncSubject","hasNext","hasCompleted","tasksByHandle","Immediate","cb","handle","then","runIfPresent","AsapAction","AnimationFrameAction","AsapScheduler","requestAnimationFrame","cancelAnimationFrame","VirtualAction","AnimationFrameScheduler","VirtualTimeScheduler","maxFrames","frame","frameTimeFactor","sort","sortActions","a","OuterSubscriber","ArgumentOutOfRangeError","EmptyError","TimeoutError","MapSubscriber","project","thisArg","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","InnerSubscriber","iterator","subscribeTo","obs","TypeError","promise","Symbol_iterator","iterable","item","done","return","subscribeToResult","outerSubscriber","NONE","StaticIterator","CombineLatestSubscriber","resultSelector","values","observables","toRespond","unused","oldVal","_tryResultSelector","MergeMapSubscriber","concurrent","buffer","_tryNext","_innerSub","ish","ForkJoinSubscriber","sources","completed","haveValues","innerSubscription","_hasValue","RaceSubscriber","hasFirst","ZipSubscriber","iterators","StaticArrayIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","_tryresultSelector","nextResult","isComplete","AtpTimePickerComponent","resolver","timeSelected","EventEmitter","theme","arrowStyle","background","color","cfr","resolveComponentFactory","tsc","container","createComponent","instance","timerElement","emit","ComponentFactoryResolver","ApplicationRef","propDecorators","ViewChild","read","ViewContainerRef","Output","arabic","Intl","NumberFormat","persian","PersianPreference","format","exp","ArabicPreference","ChinesePreference","AmazingTimePickerService","injector","open","locale","attachView","domElem","rootNodes","document","body","appendChild","Preference","afterClose","Injector","AtpDirective","viewContainerRef","atp","myClick","onChange","elementRef","onClick","nativeElement","getAttribute","JSON","parse","replace","RegExp","retTime","writeValue","registerOnChange","registerOnTouched","Directive","providers","provide","NG_VALUE_ACCESSOR","useExisting","multi","HostListener","AmazingTimePickerModule","NgModule","imports","CommonModule","declarations","entryComponents","exports"],"mappings":"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"}
