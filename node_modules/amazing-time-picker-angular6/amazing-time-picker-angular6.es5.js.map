{"version":3,"file":"amazing-time-picker-angular6.es5.js","sources":["ts/amazing-time-picker-angular6.ts","ts/src/app/atp-library/atp-time-picker.module.ts","ts/src/app/atp-library/atp.directive.ts","ts/src/app/atp-library/atp-time-picker.service.ts","ts/src/app/atp-library/preferences.ts","ts/src/app/atp-library/atp-time-picker/atp-time-picker.component.ts","../../node_modules/rxjs/src/index.ts","../../node_modules/rxjs/src/internal/observable/zip.ts","../../node_modules/rxjs/src/internal/observable/using.ts","../../node_modules/rxjs/src/internal/observable/timer.ts","../../node_modules/rxjs/src/internal/observable/range.ts","../../node_modules/rxjs/src/internal/observable/race.ts","../../node_modules/rxjs/src/internal/observable/pairs.ts","../../node_modules/rxjs/src/internal/observable/onErrorResumeNext.ts","../../node_modules/rxjs/src/internal/observable/never.ts","../../node_modules/rxjs/src/internal/observable/merge.ts","../../node_modules/rxjs/src/internal/observable/interval.ts","../../node_modules/rxjs/src/internal/util/isNumeric.ts","../../node_modules/rxjs/src/internal/observable/iif.ts","../../node_modules/rxjs/src/internal/observable/generate.ts","../../node_modules/rxjs/src/internal/observable/fromEventPattern.ts","../../node_modules/rxjs/src/internal/observable/fromEvent.ts","../../node_modules/rxjs/src/internal/observable/forkJoin.ts","../../node_modules/rxjs/src/internal/observable/defer.ts","../../node_modules/rxjs/src/internal/observable/concat.ts","../../node_modules/rxjs/src/internal/operators/concatAll.ts","../../node_modules/rxjs/src/internal/operators/mergeAll.ts","../../node_modules/rxjs/src/internal/operators/mergeMap.ts","../../node_modules/rxjs/src/internal/observable/from.ts","../../node_modules/rxjs/src/internal/observable/fromObservable.ts","../../node_modules/rxjs/src/internal/observable/fromIterable.ts","../../node_modules/rxjs/src/internal/observable/fromPromise.ts","../../node_modules/rxjs/src/internal/util/isIterable.ts","../../node_modules/rxjs/src/internal/util/isInteropObservable.ts","../../node_modules/rxjs/src/internal/observable/combineLatest.ts","../../node_modules/rxjs/src/internal/util/subscribeToResult.ts","../../node_modules/rxjs/src/internal/util/subscribeTo.ts","../../node_modules/rxjs/src/internal/util/isPromise.ts","../../node_modules/rxjs/src/internal/util/isArrayLike.ts","../../node_modules/rxjs/src/internal/util/subscribeToObservable.ts","../../node_modules/rxjs/src/internal/util/subscribeToIterable.ts","../../node_modules/rxjs/src/internal/symbol/iterator.ts","../../node_modules/rxjs/src/internal/util/subscribeToPromise.ts","../../node_modules/rxjs/src/internal/InnerSubscriber.ts","../../node_modules/rxjs/src/internal/OuterSubscriber.ts","../../node_modules/rxjs/src/internal/observable/bindNodeCallback.ts","../../node_modules/rxjs/src/internal/observable/bindCallback.ts","../../node_modules/rxjs/src/internal/operators/map.ts","../../node_modules/rxjs/src/internal/util/TimeoutError.ts","../../node_modules/rxjs/src/internal/util/EmptyError.ts","../../node_modules/rxjs/src/internal/util/ArgumentOutOfRangeError.ts","../../node_modules/rxjs/src/internal/util/isObservable.ts","../../node_modules/rxjs/src/internal/util/identity.ts","../../node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts","../../node_modules/rxjs/src/internal/scheduler/animationFrame.ts","../../node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler.ts","../../node_modules/rxjs/src/internal/scheduler/AnimationFrameAction.ts","../../node_modules/rxjs/src/internal/scheduler/async.ts","../../node_modules/rxjs/src/internal/scheduler/asap.ts","../../node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts","../../node_modules/rxjs/src/internal/scheduler/AsapAction.ts","../../node_modules/rxjs/src/internal/util/Immediate.ts","../../node_modules/rxjs/src/internal/AsyncSubject.ts","../../node_modules/rxjs/src/internal/ReplaySubject.ts","../../node_modules/rxjs/src/internal/operators/observeOn.ts","../../node_modules/rxjs/src/internal/Notification.ts","../../node_modules/rxjs/src/internal/observable/throwError.ts","../../node_modules/rxjs/src/internal/observable/of.ts","../../node_modules/rxjs/src/internal/observable/scalar.ts","../../node_modules/rxjs/src/internal/observable/fromArray.ts","../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../node_modules/rxjs/src/internal/util/isScheduler.ts","../../node_modules/rxjs/src/internal/observable/empty.ts","../../node_modules/rxjs/src/internal/scheduler/queue.ts","../../node_modules/rxjs/src/internal/scheduler/QueueScheduler.ts","../../node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","../../node_modules/rxjs/src/internal/Scheduler.ts","../../node_modules/rxjs/src/internal/scheduler/QueueAction.ts","../../node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","../../node_modules/rxjs/src/internal/scheduler/Action.ts","../../node_modules/rxjs/src/internal/BehaviorSubject.ts","../../node_modules/rxjs/src/internal/operators/groupBy.ts","../../node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","../../node_modules/rxjs/src/internal/operators/refCount.ts","../../node_modules/rxjs/src/internal/Subject.ts","../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../node_modules/rxjs/src/internal/Observable.ts","../../node_modules/rxjs/src/internal/util/pipe.ts","../../node_modules/rxjs/src/internal/util/noop.ts","../../node_modules/rxjs/src/internal/symbol/observable.ts","../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../node_modules/rxjs/src/internal/Subscriber.ts","../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../node_modules/rxjs/src/internal/Subscription.ts","../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../node_modules/rxjs/src/internal/util/tryCatch.ts","../../node_modules/rxjs/src/internal/util/errorObject.ts","../../node_modules/rxjs/src/internal/util/isObject.ts","../../node_modules/rxjs/src/internal/util/isArray.ts","../../node_modules/rxjs/src/internal/Observer.ts","../../node_modules/rxjs/src/internal/util/hostReportError.ts","../../node_modules/rxjs/src/internal/config.ts","../../node_modules/rxjs/src/internal/util/isFunction.ts","../../node_modules/rxjs/node_modules/tslib/tslib.es6.js","ts/src/app/atp-library/time-picker/time-picker.component.ts","ts/src/app/atp-library/atp-core.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {AmazingTimePickerModule,AmazingTimePickerService} from './public_api';\n\nexport {AtpCoreService as ɵb} from './src/app/atp-library/atp-core.service';\nexport {AtpTimePickerComponent as ɵc} from './src/app/atp-library/atp-time-picker/atp-time-picker.component';\nexport {AtpDirective as ɵd} from './src/app/atp-library/atp.directive';\nexport {TimePickerComponent as ɵa} from './src/app/atp-library/time-picker/time-picker.component';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TimePickerComponent } from './time-picker/time-picker.component';\nimport { AtpTimePickerComponent } from './atp-time-picker/atp-time-picker.component';\nimport { AmazingTimePickerService } from './atp-time-picker.service';\nimport { AtpDirective } from './atp.directive';\nimport { AtpCoreService } from './atp-core.service';\nexport class AmazingTimePickerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TimePickerComponent,\n    AtpTimePickerComponent,\n    AtpDirective\n  ],\n  providers: [\n    AmazingTimePickerService,\n    AtpCoreService\n  ],\n  entryComponents: [TimePickerComponent],\n  exports: [\n    TimePickerComponent,\n    AtpTimePickerComponent,\n    AtpDirective\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AmazingTimePickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAmazingTimePickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAmazingTimePickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, Output, EventEmitter, HostListener, ElementRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AmazingTimePickerService } from './atp-time-picker.service';\nexport class AtpDirective implements ControlValueAccessor {\n\n   myClick = new EventEmitter();\nprivate elementRef: ElementRef;\nprivate onChange = (x: any): void => {};\n/**\n * @param {?} viewContainerRef\n * @param {?} atp\n */\nconstructor(\npublic viewContainerRef: ViewContainerRef,\nprivate atp: AmazingTimePickerService) {\n    this.elementRef = this.viewContainerRef.element;\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nonClick(e) {\n    const /** @type {?} */ ele = this.viewContainerRef.element.nativeElement;\n    const /** @type {?} */ time = ele.value;\n    const /** @type {?} */ theme = ele.getAttribute('theme');\n    const /** @type {?} */ start = ele.getAttribute('start');\n    const /** @type {?} */ end = ele.getAttribute('end');\n    const /** @type {?} */ locale = ele.getAttribute('locale') || 'en';\n    const /** @type {?} */ changeToMinutes = ele.getAttribute('changeToMinutes') === 'true';\n    const /** @type {?} */ preference = ele.getAttribute('preference') || null;\n    const /** @type {?} */ onlyHour = ele.getAttribute('onlyHour') || false;\n    const /** @type {?} */ onlyMinute = ele.getAttribute('onlyMinute') || false;\n    const /** @type {?} */ onlyAM = ele.getAttribute('onlyAM') || false;\n    const /** @type {?} */ onlyPM = ele.getAttribute('onlyPM') || false;\n    let /** @type {?} */ arrowStyle = ele.getAttribute('arrowStyle');\n    arrowStyle = (arrowStyle) ? JSON.parse(arrowStyle.replace(new RegExp('\\'', 'g'), '\"')) : '';\n    const /** @type {?} */ timePickerFunction = this.atp.open({\n      time,\n      theme,\n      rangeTime: { start, end},\n      'arrowStyle': arrowStyle,\n      locale,\n      changeToMinutes,\n      onlyHour,\n      onlyMinute,\n      onlyAM,\n      onlyPM,\n      preference\n    });\n\n    timePickerFunction.afterClose().subscribe(retTime => {\n      this.writeValue(retTime); // update the native element\n      this.onChange(retTime); // update the form value (if there's a form)\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    if (this.elementRef) {\n      this.elementRef.nativeElement.value = value;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any) {\n    this.onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn) {  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[atp-time-picker]',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: AtpDirective,\n    multi: true\n  }]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: AmazingTimePickerService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'myClick': [{ type: Output },],\n'onClick': [{ type: HostListener, args: ['click', ['$event'], ] },],\n};\n}\n\nfunction AtpDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpDirective.ctorParameters;\n/** @type {?} */\nAtpDirective.propDecorators;\n/** @type {?} */\nAtpDirective.prototype.myClick;\n/** @type {?} */\nAtpDirective.prototype.elementRef;\n/** @type {?} */\nAtpDirective.prototype.onChange;\n/** @type {?} */\nAtpDirective.prototype.viewContainerRef;\n/** @type {?} */\nAtpDirective.prototype.atp;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, ViewContainerRef, Injector, ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef } from '@angular/core';\nimport { TimePickerComponent } from './time-picker/time-picker.component';\nimport { TimePickerConfig, IDialogResult } from './definitions';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { Preference } from './preferences';\nexport class AmazingTimePickerService {\n/**\n * @param {?} resolver\n * @param {?} appRef\n * @param {?} injector\n */\nconstructor (\nprivate resolver: ComponentFactoryResolver,\nprivate appRef: ApplicationRef,\nprivate injector: Injector\n  ) {}\n/**\n * @param {?=} config\n * @return {?}\n */\nopen (config?: TimePickerConfig): IDialogResult {\n    const /** @type {?} */ thems = ['light', 'dark', 'material-red', 'material-green', 'material-blue', 'material-purple', 'material-orange'];\n    const /** @type {?} */ _self = this;\n    config = config || {};\n    config = /** @type {?} */(( {\n      time: config.time || '00:00',\n      theme: thems.indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n      rangeTime: config.rangeTime || {start: '0:0', end: '24:0'},\n      arrowStyle: config.arrowStyle || {},\n      locale: config.locale || 'en',\n      changeToMinutes: config.changeToMinutes || false,\n      preference: config.preference || null,\n      onlyHour: config.onlyHour || false,\n      onlyMinute: config.onlyMinute || false,\n      onlyAM: config.onlyAM || false,\n      onlyPM: config.onlyPM || false,\n    } as TimePickerConfig));\n    config.rangeTime = {\n      start: config.rangeTime.start || '0:0',\n      end: config.rangeTime.end || '24:0',\n    };\n    config.arrowStyle = {\n      background: (config.arrowStyle.background) ?\n      config.arrowStyle.background : config.theme !== undefined ?\n      config.theme === 'dark' ? 'rgb(128, 203, 196)' : '' : '',\n      color: config.arrowStyle.color || ''\n    };\n    const /** @type {?} */ componentRef = this.resolver.resolveComponentFactory(TimePickerComponent);\n    const /** @type {?} */ tsc = componentRef.create(this.injector);\n    this.appRef.attachView(tsc.hostView);\n    const /** @type {?} */ domElem = /** @type {?} */(( ( /** @type {?} */((tsc.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n    document.body.appendChild(domElem);\n    tsc.instance.subject = new Subject<any>();\n    tsc.instance._ref = tsc;\n    tsc.instance.appRef = this.appRef;\n    tsc.instance.timerElement = '';\n    tsc.instance.config = config;\n    if (config.preference) {\n      tsc.instance.preference = config.preference;\n    } else {\n      tsc.instance.preference = Preference(config.locale);\n    }\n    tsc.instance.ParseStringToTime(config.time);\n    return {\n      afterClose: function () {\n        return tsc.instance.subject.asObservable();\n      }\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n{type: Injector, },\n];\n}\n\nfunction AmazingTimePickerService_tsickle_Closure_declarations() {\n/** @type {?} */\nAmazingTimePickerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAmazingTimePickerService.ctorParameters;\n/** @type {?} */\nAmazingTimePickerService.prototype.resolver;\n/** @type {?} */\nAmazingTimePickerService.prototype.appRef;\n/** @type {?} */\nAmazingTimePickerService.prototype.injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IDisplayPreference } from './definitions';\n\nconst /** @type {?} */ arabic = new Intl.NumberFormat('ar-AE');\nconst /** @type {?} */ persian = new Intl.NumberFormat('fa-IR');\n\nexport const /** @type {?} */ PersianPreference: IDisplayPreference = {\n  hour: (x) => persian.format(x),\n  minute: (x) => {\n    let /** @type {?} */ exp = persian.format(x);\n    if (exp.length === 1) {\n      exp = persian.format(0) + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? 'صبح' : 'عصر',\n  clockHour: (x) => persian.format(x),\n  clockMinute: (x) => persian.format(x),\n  labels: {\n    ok: 'تایید',\n    cancel: 'لغو'\n  }\n};\n\nexport const /** @type {?} */ ArabicPreference: IDisplayPreference = {\n  hour: (x) => arabic.format(x),\n  minute: (x) => {\n    let /** @type {?} */ exp = arabic.format(x);\n    if (exp.length === 1) {\n      exp = arabic.format(0) + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? 'صباحا' : 'مساء',\n  clockHour: (x) => arabic.format(x),\n  clockMinute: (x) => arabic.format(x),\n  labels: {\n    ok: 'حسنا',\n    cancel: 'إلغاء'\n  }\n};\n\nexport const /** @type {?} */ ChinesePreference: IDisplayPreference = {\n  hour:  (x) => x,\n  minute: (x) => {\n    let /** @type {?} */ exp = x;\n    if (exp.length === 1) {\n      exp = '۰' + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? '上午' : '下午',\n  clockHour: (x) => x,\n  clockMinute: (x) => x,\n  labels: {\n    ok: '好',\n    cancel: '取消'\n  }\n};\n\nexport const /** @type {?} */ Preference = (locale: string): IDisplayPreference => {\n  switch (locale) {\n    case 'fa':\n        return PersianPreference;\n    case 'ar':\n        return ArabicPreference;\n    case 'ch':\n        return ChinesePreference;\n    default:\n      return null;\n  }\n};\n","import { Component, ViewChild, ViewContainerRef, Output, ComponentFactoryResolver, OnInit, ApplicationRef, EventEmitter\n} from '@angular/core';\nimport { TimePickerComponent } from '../time-picker/time-picker.component';\nimport { TimePickerConfig } from '../definitions';\nimport { Subject } from 'rxjs';\nexport class AtpTimePickerComponent implements OnInit {\n   container: ViewContainerRef;\n   timeSelected: EventEmitter<string> = new EventEmitter<string>();\npublic config: TimePickerConfig = {};\n/**\n * @param {?} resolver\n * @param {?} appRef\n */\nconstructor(\nprivate resolver: ComponentFactoryResolver,\nprivate appRef: ApplicationRef,\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    let /** @type {?} */ config = this.config;\n    config = {\n      time: config.time || '00:00',\n      theme: ['light', 'dark', 'material'].indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n      rangeTime: config.rangeTime || {start: '0:0', end: '24:0'},\n      arrowStyle: config.arrowStyle || {}\n    };\n    config.arrowStyle = {\n      background: (config.arrowStyle.background) ?\n      config.arrowStyle.background : config.theme !== undefined ?\n      config.theme === 'dark' ? 'rgb(128, 203, 196)' : 'blue' : 'blue',\n      color: config.arrowStyle.color || '#fff'\n    };\n    const /** @type {?} */ cfr = this.resolver.resolveComponentFactory(TimePickerComponent);\n    const /** @type {?} */ tsc = this.container.createComponent(cfr);\n    tsc.instance.subject = new Subject<any>();\n    tsc.instance._ref = tsc;\n    tsc.instance.appRef = this.appRef;\n    tsc.instance.timerElement = '';\n    tsc.instance.config = config;\n    tsc.instance.activeModal = true;\n    tsc.instance.isPopup = false;\n    tsc.instance.ParseStringToTime(config.time);\n    tsc.instance.subject.asObservable().subscribe(time => {\n      this.timeSelected.emit(time);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'atp-time-picker',\n  template: `\n    <div #container></div>\n  `,\n  styles: [`\n    .atp-time-picker .icon-container {\n      display: inline-block;\n      margin-right: .2em; }\n      .atp-time-picker .icon-container svg {\n        cursor: pointer;\n        position: relative;\n        top: .5em; }\n      .atp-time-picker .icon-container /deep/ i {\n        cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'container': [{ type: ViewChild, args: ['container', { read: ViewContainerRef }, ] },],\n'timeSelected': [{ type: Output },],\n};\n}\n\nfunction AtpTimePickerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpTimePickerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpTimePickerComponent.ctorParameters;\n/** @type {?} */\nAtpTimePickerComponent.propDecorators;\n/** @type {?} */\nAtpTimePickerComponent.prototype.container;\n/** @type {?} */\nAtpTimePickerComponent.prototype.timeSelected;\n/** @type {?} */\nAtpTimePickerComponent.prototype.config;\n/** @type {?} */\nAtpTimePickerComponent.prototype.resolver;\n/** @type {?} */\nAtpTimePickerComponent.prototype.appRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/* Observable */\nexport { Observable } from './internal/Observable';\nexport { ConnectableObservable } from './internal/observable/ConnectableObservable';\nexport { GroupedObservable } from './internal/operators/groupBy';\nexport { Operator } from './internal/Operator';\nexport { observable } from './internal/symbol/observable';\n\n/* Subjects */\nexport { Subject } from './internal/Subject';\nexport { BehaviorSubject } from './internal/BehaviorSubject';\nexport { ReplaySubject } from './internal/ReplaySubject';\nexport { AsyncSubject } from './internal/AsyncSubject';\n\n/* Schedulers */\nexport { asap as asapScheduler } from './internal/scheduler/asap';\nexport { async as asyncScheduler } from './internal/scheduler/async';\nexport { queue as queueScheduler } from './internal/scheduler/queue';\nexport { animationFrame as animationFrameScheduler } from './internal/scheduler/animationFrame';\nexport { VirtualTimeScheduler, VirtualAction } from './internal/scheduler/VirtualTimeScheduler';\nexport { Scheduler } from './internal/Scheduler';\n\n/* Subscription */\nexport { Subscription } from './internal/Subscription';\nexport { Subscriber } from './internal/Subscriber';\n\n/* Notification */\nexport { Notification } from './internal/Notification';\n\n/* Utils */\nexport { pipe } from './internal/util/pipe';\nexport { noop } from './internal/util/noop';\nexport { identity } from './internal/util/identity';\nexport { isObservable } from './internal/util/isObservable';\n\n/* Error types */\nexport { ArgumentOutOfRangeError } from './internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from './internal/util/EmptyError';\nexport { ObjectUnsubscribedError } from './internal/util/ObjectUnsubscribedError';\nexport { UnsubscriptionError } from './internal/util/UnsubscriptionError';\nexport { TimeoutError } from './internal/util/TimeoutError';\n\n/* Static observable creation exports */\nexport { bindCallback } from './internal/observable/bindCallback';\nexport { bindNodeCallback } from './internal/observable/bindNodeCallback';\nexport { combineLatest } from './internal/observable/combineLatest';\nexport { concat } from './internal/observable/concat';\nexport { defer } from './internal/observable/defer';\nexport { empty } from './internal/observable/empty';\nexport { forkJoin } from './internal/observable/forkJoin';\nexport { from } from './internal/observable/from';\nexport { fromEvent } from './internal/observable/fromEvent';\nexport { fromEventPattern } from './internal/observable/fromEventPattern';\nexport { generate } from './internal/observable/generate';\nexport { iif } from './internal/observable/iif';\nexport { interval } from './internal/observable/interval';\nexport { merge } from './internal/observable/merge';\nexport { never } from './internal/observable/never';\nexport { of } from './internal/observable/of';\nexport { onErrorResumeNext } from './internal/observable/onErrorResumeNext';\nexport { pairs } from './internal/observable/pairs';\nexport { race } from './internal/observable/race';\nexport { range } from './internal/observable/range';\nexport { throwError } from './internal/observable/throwError';\nexport { timer } from './internal/observable/timer';\nexport { using } from './internal/observable/using';\nexport { zip } from './internal/observable/zip';\n\n/* Constants */\nexport { EMPTY } from './internal/observable/empty';\nexport { NEVER } from './internal/observable/never';\n\n/* Types */\nexport * from './internal/types';\n\n/* Config */\nexport { config } from './internal/config';\n","import { Observable } from '../Observable';\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { ObservableInput, PartialObserver } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zip<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zip<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zip<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zip<R>(array: ObservableInput<any>[]): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R): Observable<R>;\n\nexport function zip<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zip<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n * Combine age and name from different sources\n * ```javascript\n * let age$ = of<number>(27, 25, 29);\n * let name$ = of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = of<boolean>(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map((age: number, name: string, isDev: boolean) => ({ age, name, isDev })),\n * )\n * .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const resultSelector = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n  return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  resultSelector: (...values: Array<any>) => R;\n\n  constructor(resultSelector?: (...values: Array<any>) => R) {\n    this.resultSelector = resultSelector;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private resultSelector: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              resultSelector?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.resultSelector) {\n      this._tryresultSelector(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryresultSelector(args: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Unsubscribable, ObservableInput } from '../types';\nimport { from } from './from'; // from from from! LAWL\nimport { EMPTY } from './empty';\n\n/**\n * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\n *\n * <span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\n *\n * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.\n * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\n * that object and should return an Observable. That Observable can use resource object during its execution.\n * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor\n * resource object will be shared in any way between subscriptions.\n *\n * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\n * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\n * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\n * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\n * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\n * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\n * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\n *\n * @see {@link defer}\n *\n * @param {function(): ISubscription} resourceFactory A function which creates any resource object\n * that implements `unsubscribe` method.\n * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which\n * creates an Observable, that can use injected resource object.\n * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\n * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\n */\nexport function using<T>(resourceFactory: () => Unsubscribable | void,\n                         observableFactory: (resource: Unsubscribable | void) => ObservableInput<T> | void): Observable<T> {\n  return new Observable<T>(subscriber => {\n    let resource: Unsubscribable | void;\n\n    try {\n      resource = resourceFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    let result: ObservableInput<T> | void;\n    try {\n      result = observableFactory(resource);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    const source = result ? from(result) : EMPTY;\n    const subscription = source.subscribe(subscriber);\n    return () => {\n      subscription.unsubscribe();\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}\n","import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that starts emitting after an `initialDelay` and\n * emits ever increasing numbers after each `period` of time thereafter.\n *\n * <span class=\"informal\">Its like {@link interval}, but you can specify when\n * should the emissions start.</span>\n *\n * <img src=\"./img/timer.png\" width=\"100%\">\n *\n * `timer` returns an Observable that emits an infinite sequence of ascending\n * integers, with a constant interval of time, `period` of your choosing\n * between those emissions. The first emission happens after the specified\n * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n * operator uses the `async` IScheduler to provide a notion of time, but you\n * may pass any IScheduler to it. If `period` is not specified, the output\n * Observable emits only one value, `0`. Otherwise, it emits an infinite\n * sequence.\n *\n * ## Examples\n * ### Emits ascending numbers, one every second (1000ms), starting after 3 seconds\n * ```javascript\n * const numbers = timer(3000, 1000);\n * numbers.subscribe(x => console.log(x));\n * ```\n *\n * ### Emits one number after five seconds\n * ```javascript\n * const numbers = timer(5000);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link interval}\n * @see {@link delay}\n *\n * @param {number|Date} [dueTime] The initial delay time to wait before\n * emitting the first value of `0`.\n * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\n * subsequent numbers.\n * @param {SchedulerLike} [scheduler=async] The IScheduler to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a `0` after the\n * `initialDelay` and ever increasing numbers after each `period` of time\n * thereafter.\n * @static true\n * @name timer\n * @owner Observable\n */\nexport function timer(dueTime: number | Date = 0,\n                      periodOrScheduler?: number | SchedulerLike,\n                      scheduler?: SchedulerLike): Observable<number> {\n  let period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler as any;\n  }\n\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n\n  return new Observable(subscriber => {\n    const due = isNumeric(dueTime)\n      ? (dueTime as number)\n      : (+dueTime - scheduler.now());\n\n    return scheduler.schedule(dispatch, due, {\n      index: 0, period, subscriber\n    });\n  });\n}\n\ninterface TimerState {\n  index: number;\n  period: number;\n  subscriber: Subscriber<number>;\n}\n\nfunction dispatch(this: SchedulerAction<TimerState>, state: TimerState) {\n  const { index, period, subscriber } = state;\n  subscriber.next(index);\n\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n\n  state.index = index + 1;\n  this.schedule(state, period);\n}\n","import { SchedulerAction, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\n\n/**\n * Creates an Observable that emits a sequence of numbers within a specified\n * range.\n *\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n *\n * <img src=\"./img/range.png\" width=\"100%\">\n *\n * `range` operator emits a range of sequential integers, in order, where you\n * select the `start` of the range and its `length`. By default, uses no\n * IScheduler and just delivers the notifications synchronously, but may use\n * an optional IScheduler to regulate those deliveries.\n *\n * ## Example\n * Emits the numbers 1 to 10</caption>\n * ```javascript\n * const numbers = range(1, 10);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link timer}\n * @see {@link interval}\n *\n * @param {number} [start=0] The value of the first integer in the sequence.\n * @param {number} [count=0] The number of sequential integers to generate.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emissions of the notifications.\n * @return {Observable} An Observable of numbers that emits a finite range of\n * sequential integers.\n * @static true\n * @name range\n * @owner Observable\n */\nexport function range(start: number = 0,\n                      count: number = 0,\n                      scheduler?: SchedulerLike): Observable<number> {\n  return new Observable<number>(subscriber => {\n    let index = 0;\n    let current = start;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(current++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n\n    return undefined;\n  });\n}\n\n/** @internal */\nexport function dispatch(this: SchedulerAction<any>, state: any) {\n  const { start, index, count, subscriber } = state;\n\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n\n  subscriber.next(start);\n\n  if (subscriber.closed) {\n    return;\n  }\n\n  state.index = index + 1;\n  state.start = start + 1;\n\n  this.schedule(state);\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```javascript\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable as any, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\n/**\n * Convert an object into an observable sequence of [key, value] pairs\n * using an optional IScheduler to enumerate the object.\n *\n * ## Example\n * Converts a javascript object to an Observable\n * ```javascript\n * const obj = {\n *   foo: 42,\n *   bar: 56,\n *   baz: 78,\n * };\n *\n * const source = pairs(obj);\n *\n * const subscription = source.subscribe(\n *   x => console.log('Next: %s', x),\n *   err => console.log('Error: %s', err),\n *   () => console.log('Completed'),\n * );\n * ```\n *\n * @param {Object} obj The object to inspect and turn into an\n * Observable sequence.\n * @param {Scheduler} [scheduler] An optional IScheduler to run the\n * enumeration of the input sequence on.\n * @returns {(Observable<[string, T]>)} An observable sequence of\n * [key, value] pairs from the object.\n */\nexport function pairs<T>(obj: Object, scheduler?: SchedulerLike): Observable<[string, T]> {\n  if (!scheduler) {\n    return new Observable<[string, T]>(subscriber => {\n      const keys = Object.keys(obj);\n      for (let i = 0; i < keys.length && !subscriber.closed; i++) {\n        const key = keys[i];\n        if (obj.hasOwnProperty(key)) {\n          subscriber.next([key, obj[key]]);\n        }\n      }\n      subscriber.complete();\n    });\n  } else {\n    return new Observable<[string, T]>(subscriber => {\n      const keys = Object.keys(obj);\n      const subscription = new Subscription();\n      subscription.add(\n        scheduler.schedule<{ keys: string[], index: number, subscriber: Subscriber<[string, T]>, subscription: Subscription, obj: Object }>\n          (dispatch, 0, { keys, index: 0, subscriber, subscription, obj }));\n      return subscription;\n    });\n  }\n}\n\n/** @internal */\nexport function dispatch<T>(this: SchedulerAction<any>,\n                            state: { keys: string[], index: number, subscriber: Subscriber<[string, T]>, subscription: Subscription, obj: Object }) {\n  const { keys, index, subscriber, subscription, obj } = state;\n  if (!subscriber.closed) {\n    if (index < keys.length) {\n      const key = keys[index];\n      subscriber.next([key, obj[key]]);\n      subscription.add(this.schedule({ keys, index: index + 1, subscriber, subscription, obj }));\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { from } from './from';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNext<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` Will subscribe to each observable source it is provided, in order.\n * If the source it's subscribed to emits an error or completes, it will move to the next source\n * without error.\n *\n * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link EMPTY}.\n *\n * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its\n * sources emits an error.\n *\n * Note that there is no way to handle any errors thrown by sources via the resuult of\n * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can\n * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.\n *\n * ## Example\n * Subscribe to the next Observable after map fails</caption>\n * ```javascript\n * import { onErrorResumeNext, of } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * onErrorResumeNext(\n *  of(1, 2, 3, 0).pipe(\n *    map(x => {\n *      if (x === 0) throw Error();\n *      return 10 / x;\n *    })\n *  ),\n *  of(1, 2, 3),\n * )\n * .subscribe(\n *   val => console.log(val),\n *   err => console.log(err),          // Will never be called.\n *   () => console.log('done'),\n * );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"done\"\n * ```\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.\n * @return {Observable} An Observable that concatenates all sources, one after the other,\n * ignoring all errors, such that any error causes it to move on to the next source.\n */\nexport function onErrorResumeNext<T, R>(...sources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  const [ first, ...remainder ] = sources;\n\n  if (sources.length === 1 && isArray(first)) {\n    return onErrorResumeNext(...first);\n  }\n\n  return new Observable(subscriber => {\n    const subNext = () => subscriber.add(\n      onErrorResumeNext(...remainder).subscribe(subscriber)\n    );\n\n    return from(first).subscribe({\n      next(value) { subscriber.next(value); },\n      error: subNext,\n      complete: subNext,\n    });\n  });\n}\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * <img src=\"./img/never.png\" width=\"100%\">\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n * ### Emit the number 7, then never emit anything else (not even complete)\n * ```javascript\n * function info() {\n *   console.log('Will not be called');\n * }\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe(x => console.log(x), info, info);\n *\n * ```\n *\n * @see {@link create}\n * @see {@link EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Deprecated in favor of using NEVER constant.\n */\nexport function never () {\n  return NEVER;\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike} from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * ### Merge together two Observables: 1s interval and clicks\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```javascript\n *\n * ### Merge together 3 Observables, but only 2 run concurrently\n * ```javascript\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: SchedulerLike = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <SchedulerLike>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll<R>(concurrent)(fromArray<any>(observables, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { isNumeric } from '../util/isNumeric';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits sequential numbers every specified\n * interval of time, on a specified IScheduler.\n *\n * <span class=\"informal\">Emits incremental numbers periodically in time.\n * </span>\n *\n * <img src=\"./img/interval.png\" width=\"100%\">\n *\n * `interval` returns an Observable that emits an infinite sequence of\n * ascending integers, with a constant interval of time of your choosing\n * between those emissions. The first emission is not sent immediately, but\n * only after the first period has passed. By default, this operator uses the\n * `async` IScheduler to provide a notion of time, but you may pass any\n * IScheduler to it.\n *\n * ## Example\n * Emits ascending numbers, one every second (1000ms)\n * ```javascript\n * const numbers = interval(1000);\n * numbers.subscribe(x => console.log(x));\n * ```javascript\n * @see {@link timer}\n * @see {@link delay}\n *\n * @param {number} [period=0] The interval size in milliseconds (by default)\n * or the time unit determined by the scheduler's clock.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a sequential number each time\n * interval.\n * @static true\n * @name interval\n * @owner Observable\n */\nexport function interval(period = 0,\n                         scheduler: SchedulerLike = async): Observable<number> {\n  if (!isNumeric(period) || period < 0) {\n    period = 0;\n  }\n\n  if (!scheduler || typeof scheduler.schedule !== 'function') {\n    scheduler = async;\n  }\n\n  return new Observable<number>(subscriber => {\n    subscriber.add(\n      scheduler.schedule(dispatch, period, { subscriber, counter: 0, period })\n    );\n    return subscriber;\n  });\n}\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state: IntervalState) {\n  const { subscriber, counter, period } = state;\n  subscriber.next(counter);\n  this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n}\n","import { isArray } from './isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n","import { Observable } from '../Observable';\nimport { defer } from './defer';\nimport { EMPTY } from './empty';\nimport { SubscribableOrPromise } from '../types';\n\n/**\n * Decides at subscription time which Observable will actually be subscribed.\n *\n * <span class=\"informal\">`If` statement for Observables.</span>\n *\n * `iif` accepts a condition function and two Observables. When\n * an Observable returned by the operator is subscribed, condition function will be called.\n * Based on what boolean it returns at that moment, consumer will subscribe either to\n * the first Observable (if condition was true) or to the second (if condition was false). Condition\n * function may also not return anything - in that case condition will be evaluated as false and\n * second Observable will be subscribed.\n *\n * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that\n * was left undefined, resulting stream will simply complete immediately. That allows you to, rather\n * then controlling which Observable will be subscribed, decide at runtime if consumer should have access\n * to given Observable or not.\n *\n * If you have more complex logic that requires decision between more than two Observables, {@link defer}\n * will probably be a better choice. Actually `iif` can be easily implemented with {@link defer}\n * and exists only for convenience and readability reasons.\n *\n *\n * ## Examples\n * ### Change at runtime which Observable will be subscribed\n * ```javascript\n * let subscribeToFirst;\n * const firstOrSecond = iif(\n *   () => subscribeToFirst,\n *   of('first'),\n *   of('second'),\n * );\n *\n * subscribeToFirst = true;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"first\"\n *\n * subscribeToFirst = false;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"second\"\n *\n * ```\n *\n * ### Control an access to an Observable\n * ```javascript\n * let accessGranted;\n * const observableIfYouHaveAccess = iif(\n *   () => accessGranted,\n *   of('It seems you have an access...'), // Note that only one Observable is passed to the operator.\n * );\n *\n * accessGranted = true;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end'),\n * );\n *\n * // Logs:\n * // \"It seems you have an access...\"\n * // \"The end\"\n *\n * accessGranted = false;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end'),\n * );\n *\n * // Logs:\n * // \"The end\"\n * ```\n *\n * @see {@link defer}\n *\n * @param {function(): boolean} condition Condition which Observable should be chosen.\n * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.\n * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.\n * @return {Observable} Either first or second Observable, depending on condition.\n * @static true\n * @name iif\n * @owner Observable\n */\nexport function iif<T, F>(\n  condition: () => boolean,\n  trueResult: SubscribableOrPromise<T> = EMPTY,\n  falseResult: SubscribableOrPromise<F> = EMPTY\n): Observable<T|F> {\n  return defer<T|F>(() => condition() ? trueResult : falseResult);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { identity } from '../util/identity';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n   */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n   */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * SchedulerLike to use for generation process.\n   * By default, a generator starts immediately.\n   */\n  scheduler?: SchedulerLike;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * const res = generate(0, x => x < 10, x => x + 1, x => x);\n *\n * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n * const res = generate(1, x => x < 5, x =>  * 2, x => x + 1, Rx.Scheduler.asap);\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n * @param {Scheduler} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.\n * @returns {Observable<T>} The generated sequence.\n */\n  export function generate<T, S>(initialState: S,\n                                 condition: ConditionFunc<S>,\n                                 iterate: IterateFunc<S>,\n                                 resultSelector: ResultFunc<S, T>,\n                                 scheduler?: SchedulerLike): Observable<T>;\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload uses state as an emitted value.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * const res = generate(0, x => x < 10, x => x + 1);\n *\n * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n * const res = generate(1, x => x < 5, x => x  * 2, Rx.Scheduler.asap);\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {Scheduler} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.\n * @returns {Observable<S>} The generated sequence.\n */\nexport function generate<S>(initialState: S,\n                            condition: ConditionFunc<S>,\n                            iterate: IterateFunc<S>,\n                            scheduler?: SchedulerLike): Observable<S>;\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition and scheduler.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * const res = generate({\n *   initialState: 0,\n *   condition: x => x < 10,\n *   iterate: x => x + 1,\n * });\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n * @returns {Observable<S>} The generated sequence.\n */\nexport function generate<S>(options: GenerateBaseOptions<S>): Observable<S>;\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition, result selector and scheduler.\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * const res = generate({\n *   initialState: 0,\n *   condition: x => x < 10,\n *   iterate: x => x + 1,\n *   resultSelector: x => x,\n * });\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n * @returns {Observable<T>} The generated sequence.\n */\nexport function generate<T, S>(options: GenerateOptions<T, S>): Observable<T>;\n\nexport function generate<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                               condition?: ConditionFunc<S>,\n                               iterate?: IterateFunc<S>,\n                               resultSelectorOrObservable?: (ResultFunc<S, T>) | SchedulerLike,\n                               scheduler?: SchedulerLike): Observable<T> {\n\n  let resultSelector: ResultFunc<S, T>;\n  let initialState: S;\n\n  if (arguments.length == 1) {\n    const options = initialStateOrOptions as GenerateOptions<T, S>;\n    initialState = options.initialState;\n    condition = options.condition;\n    iterate = options.iterate;\n    resultSelector = options.resultSelector || identity as ResultFunc<S, T>;\n    scheduler = options.scheduler;\n  } else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n    initialState = initialStateOrOptions as S;\n    resultSelector = identity as ResultFunc<S, T>;\n    scheduler = resultSelectorOrObservable as SchedulerLike;\n  } else {\n    initialState = initialStateOrOptions as S;\n    resultSelector = resultSelectorOrObservable as ResultFunc<S, T>;\n  }\n\n  return new Observable<T>(subscriber => {\n    let state = initialState;\n    if (scheduler) {\n      return scheduler.schedule<SchedulerState<T, S>>(dispatch, 0, {\n        subscriber,\n        iterate,\n        condition,\n        resultSelector,\n        state\n      });\n    }\n\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return undefined;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return undefined;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return undefined;\n      }\n    } while (true);\n\n    return undefined;\n  });\n}\n\nfunction dispatch<T, S>(this: SchedulerAction<SchedulerState<T, S>>, state: SchedulerState<T, S>) {\n  const { subscriber, condition } = state;\n  if (subscriber.closed) {\n    return undefined;\n  }\n  if (state.needIterate) {\n    try {\n      state.state = state.iterate(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n  } else {\n    state.needIterate = true;\n  }\n  if (condition) {\n    let conditionResult: boolean;\n    try {\n      conditionResult = condition(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    if (!conditionResult) {\n      subscriber.complete();\n      return undefined;\n    }\n    if (subscriber.closed) {\n      return undefined;\n    }\n  }\n  let value: T;\n  try {\n    value = state.resultSelector(state.state);\n  } catch (err) {\n    subscriber.error(err);\n    return undefined;\n  }\n  if (subscriber.closed) {\n    return undefined;\n  }\n  subscriber.next(value);\n  if (subscriber.closed) {\n    return undefined;\n  }\n  return this.schedule(state);\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { fromEvent } from './fromEvent';\nimport { map } from '../operators/map';\n\n/* tslint:disable:max-line-length */\nexport function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void, resultSelector?: (...args: any[]) => T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable from an API based on addHandler/removeHandler\n * functions.\n *\n * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n * Observable.</span>\n *\n * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n *\n * Creates an Observable by using the `addHandler` and `removeHandler`\n * functions to add and remove the handlers. The `addHandler` is\n * called when the output Observable is subscribed, and `removeHandler` is\n * called when the Subscription is unsubscribed.\n *\n * ## Example\n * ### Emits clicks happening on the DOM document\n * ```javascript\n * function addClickHandler(handler) {\n *   document.addEventListener('click', handler);\n * }\n *\n * function removeClickHandler(handler) {\n *   document.removeEventListener('click', handler);\n * }\n *\n * const clicks = fromEventPattern(\n *   addClickHandler,\n *   removeClickHandler,\n * );\n * clicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link from}\n * @see {@link fromEvent}\n *\n * @param {function(handler: Function): any} addHandler A function that takes\n * a `handler` function as argument and attaches it somehow to the actual\n * source of events.\n * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n * takes a `handler` function as argument and removes it in case it was\n * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n * removeHandler function will forward it.\n * @return {Observable<T>}\n * @name fromEventPattern\n */\nexport function fromEventPattern<T>(addHandler: (handler: Function) => any,\n                                    removeHandler?: (handler: Function, signal?: any) => void,\n                                    resultSelector?: (...args: any[]) => T): Observable<T | T[]> {\n\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEventPattern<T>(addHandler, removeHandler).pipe(\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n    );\n  }\n\n  return new Observable<T | T[]>(subscriber => {\n    const handler = (...e: T[]) => subscriber.next(e.length === 1 ? e[0] : e);\n\n    let retValue: any;\n    try {\n      retValue = addHandler(handler);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    if (!isFunction(removeHandler)) {\n      return undefined;\n    }\n\n    return () => removeHandler(handler, retValue) ;\n  });\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\nconst toString: Function = Object.prototype.toString;\n\nexport interface NodeStyleEventEmitter {\n  addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n  removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener: (eventName: string, handler: NodeEventHandler) => void | {};\n  removeListener: (eventName: string, handler: NodeEventHandler) => void | {};\n}\n\nexport interface JQueryStyleEventEmitter {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(type: string, listener: ((evt: E) => void) | null, options?: boolean | AddEventListenerOptions): void;\n  removeEventListener(type: string, listener?: ((evt: E) => void) | null, options?: EventListenerOptions | boolean): void;\n}\n\nexport type EventTargetLike<T> = HasEventTargetAddRemove<T> | NodeStyleEventEmitter | NodeCompatibleEventEmitter | JQueryStyleEventEmitter;\n\nexport type FromEventTarget<T> = EventTargetLike<T> | ArrayLike<EventTargetLike<T>>;\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\n/* tslint:disable:max-line-length */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * <img src=\"./img/fromEvent.png\" width=\"100%\">\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n * ### Emits clicks happening on the DOM document\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * ### Use addEventListener with capture option\n * ```javascript\n * const clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n *                                                              // which will be passed to addEventListener\n * const clicksInDiv = fromEvent(someDivInDocument, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n * @name fromEvent\n */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: ((...args: any[]) => T)\n): Observable<T> {\n\n  if (isFunction(options)) {\n    // DEPRECATED PATH\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEvent<T>(target, eventName, <EventListenerOptions | undefined>options).pipe(\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n    );\n  }\n\n  return new Observable<T>(subscriber => {\n    function handler(e: T) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n    setupSubscription(target, eventName, handler, subscriber, options as EventListenerOptions);\n  });\n}\n\nfunction setupSubscription<T>(sourceObj: FromEventTarget<T>, eventName: string,\n                              handler: (...args: any[]) => void, subscriber: Subscriber<T>,\n                              options?: EventListenerOptions) {\n  let unsubscribe: () => void;\n  if (isEventTarget(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addEventListener(eventName, handler, options);\n    unsubscribe = () => source.removeEventListener(eventName, handler, options);\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.on(eventName, handler);\n    unsubscribe = () => source.off(eventName, handler);\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addListener(eventName, handler as NodeEventHandler);\n    unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n  } else if (sourceObj && (sourceObj as any).length) {\n    for (let i = 0, len = (sourceObj as any).length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n\n  subscriber.add(unsubscribe);\n}\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is HasEventTargetAddRemove<any> {\n  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\n/* tslint:disable:max-line-length */\n// forkJoin([a$, b$, c$]);\nexport function forkJoin<T>(sources: [ObservableInput<T>]): Observable<T[]>;\nexport function forkJoin<T, T2>(sources: [ObservableInput<T>, ObservableInput<T2>]): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>]): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>]): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>]): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>, ObservableInput<T6>]): Observable<[T, T2, T3, T4, T5, T6]>;\nexport function forkJoin<T>(sources: Array<ObservableInput<T>>): Observable<T[]>;\n\n// forkJoin(a$, b$, c$)\nexport function forkJoin<T>(v1: ObservableInput<T>): Observable<T[]>;\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Joins last values emitted by passed Observables.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * <img src=\"./img/forkJoin.png\" width=\"100%\">\n *\n * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n * or directly as arguments. If no input Observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first Observable,\n * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n * not emit more than once and it will complete after that. If you need to emit combined values not only\n * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input Observables, whenever any of\n * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other Observables.\n * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other Observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * Observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output Observable is supposed to emit a result.\n *\n * ## Examples\n * ### Use forkJoin with operator emitting immediately\n * ```javascript\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin(\n *   of(1, 2, 3, 4),\n *   of(5, 6, 7, 8),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [4, 8]\n * // \"This is how it ends!\"\n * ```\n *\n * ### Use forkJoin with operator emitting after some time\n * ```javascript\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [2, 3] after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with project function\n * ```javascript\n * import { jorkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * ).pipe(\n *   map(([n, m]) => n + m),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // 5 after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin<T>(\n  ...sources: Array<ObservableInput<T> | ObservableInput<T>[] | Function>\n): Observable<T[]> {\n\n  let resultSelector: Function;\n  if (typeof sources[sources.length - 1] === 'function') {\n    // DEPRECATED PATH\n    resultSelector = sources.pop() as Function;\n  }\n\n  // if the first and only other argument is an array\n  // assume it's been called with `forkJoin([obs1, obs2, obs3])`\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0] as Array<ObservableInput<T>>;\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return forkJoin(sources).pipe(\n      map(args => resultSelector(...args))\n    );\n  }\n\n  return new Observable(subscriber => {\n    return new ForkJoinSubscriber(subscriber, sources as Array<ObservableInput<T>>);\n  });\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T, R> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private values: T[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<R>,\n              private sources: Array<ObservableInput<T>>) {\n    super(destination);\n\n    const len = sources.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(innerSub as any)._hasValue) {\n      (innerSub as any)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const { destination, haveValues, values } = this;\n    const len = values.length;\n\n    if (!(innerSub as any)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      destination.next(values);\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { SubscribableOrPromise } from '../types';\nimport { from } from './from'; // lol\nimport { empty } from './empty';\n\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * <img src=\"./img/defer.png\" width=\"100%\">\n *\n * `defer` allows you to create the Observable only when the Observer\n * subscribes, and create a fresh Observable for each Observer. It waits until\n * an Observer subscribes to it, and then it generates an Observable,\n * typically with an Observable factory function. It does this afresh for each\n * subscriber, so although each subscriber may think it is subscribing to the\n * same Observable, in fact each subscriber gets its own individual\n * Observable.\n *\n * ## Example\n * ### Subscribe to either an Observable of clicks or an Observable of interval, at random\n * ```javascript\n * const clicksOrInterval = defer(function () {\n *   return Math.random() > 0.5\n *     ? fromEvent(document, 'click')\n *     : interval(1000);\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n * ```\n *\n * @see {@link create}\n *\n * @param {function(): SubscribableOrPromise} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n * @static true\n * @name defer\n * @owner Observable\n */\nexport function defer<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n  return new Observable(subscriber => {\n    let input: SubscribableOrPromise<T> | void;\n    try {\n      input = observableFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    const source = input ? from(input) : empty();\n    return source.subscribe(subscriber);\n  });\n}","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | SchedulerLike)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | SchedulerLike)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n * ### Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n * ```javascript\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * ### Concatenate an array of 3 Observables\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const result = concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * ### Concatenate the same Observable to repeat it\n * ```javascript\n * const timer = interval(1000).pipe(take(2));\n * *\n * concat(timer, timer) // concatenating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll<R>()(of(...observables));\n}\n","\nimport { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput } from '../types';\n\nexport function concatAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport function concatAll<R>(): OperatorFunction<any, R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(ev => interval(1000).pipe(take(4))),\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): OperatorFunction<ObservableInput<T>, T> {\n  return mergeAll<T>(1);\n}\n","\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput } from '../types';\n\nexport function mergeAll<T>(concurrent?: number): OperatorFunction<ObservableInput<T>, T>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(10))),\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap<T, T>(identity as (value: T, index: number) => ObservableInput<T>, concurrent);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```javascript\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<R>, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { ObservableInput, SchedulerLike } from '../types';\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function from<T>(input: ObservableInput<ObservableInput<T>>, scheduler?: SchedulerLike): Observable<Observable<T>>;\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n    return new Observable<T>(subscribeTo(input));\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return fromPromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return fromArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return fromIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function fromObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToObservable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => {\n        const observable: Subscribable<T> = input[Symbol_observable]();\n        sub.add(observable.subscribe({\n          next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n          error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n          complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\n\nexport function fromIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  if (!scheduler) {\n    return new Observable<T>(subscribeToIterable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let iterator: Iterator<T>;\n      sub.add(() => {\n        // Finalize generators\n        if (iterator && typeof iterator.return === 'function') {\n          iterator.return();\n        }\n      });\n      sub.add(scheduler.schedule(() => {\n        iterator = input[Symbol_iterator]();\n        sub.add(scheduler.schedule(function () {\n          if (subscriber.closed) {\n            return;\n          }\n          let value: T;\n          let done: boolean;\n          try {\n            const result = iterator.next();\n            value = result.value;\n            done = result.done;\n          } catch (err) {\n            subscriber.error(err);\n            return;\n          }\n          if (done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(value);\n            this.schedule();\n          }\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\n\nexport function fromPromise<T>(input: PromiseLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToPromise(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => input.then(\n        value => {\n          sub.add(scheduler.schedule(() => {\n            subscriber.next(value);\n            sub.add(scheduler.schedule(() => subscriber.complete()));\n          }));\n        },\n        err => {\n          sub.add(scheduler.schedule(() => subscriber.error(err)));\n        }\n      )));\n      return sub;\n    });\n  }\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return input && typeof input[Symbol_iterator] === 'function';\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return input && typeof input[Symbol_observable] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler  } from '../util/isScheduler';\nimport { isArray  } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Operator } from '../Operator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\n\nconst NONE = {};\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: SchedulerLike): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: SchedulerLike): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R, scheduler?: SchedulerLike): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | SchedulerLike>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n * ## Examples\n * ### Combine two timer Observables\n * ```javascript\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n *\n * ### Combine an array of Observables\n * ```javascript\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000),   // emit 0 and then emit n after n seconds\n *     startWith(0),\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n *\n * ### Use project function to dynamically calculate the Body-Mass Index\n * ```javascript\n * * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest(weight, height).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    SchedulerLike>): Observable<R> {\n  let resultSelector: (...values: Array<any>) => R =  null;\n  let scheduler: SchedulerLike = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <SchedulerLike>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator<T, R>(resultSelector));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private resultSelector?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private resultSelector?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryResultSelector(values: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeTo } from './subscribeTo';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription | void {\n  const destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  return subscribeTo(result)(destination);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>) => {\n  if (result instanceof Observable) {\n    return (subscriber: Subscriber<T>) => {\n        if (result._isScalar) {\n        subscriber.next((result as any).value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","export function isPromise(value: any): value is PromiseLike<any> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = iterable[Symbol_iterator]();\n  do {\n    const item = iterator.next();\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { Subscriber } from '../Subscriber';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { map } from '../operators/map';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function bindNodeCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n\nexport function bindNodeCallback<R1, R2, R3, R4>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<R1, R2, R3>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<R1, R2>(callbackFunc: (callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\nexport function bindNodeCallback<R1>(callbackFunc: (callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\nexport function bindNodeCallback(callbackFunc: (callback: (err: any) => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\n\nexport function bindNodeCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\nexport function bindNodeCallback<A1>(callbackFunc: (arg1: A1, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\nexport function bindNodeCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\nexport function bindNodeCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\nexport function bindNodeCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>; /* tslint:enable:max-line-length */\n\nexport function bindNodeCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n/**\n * Converts a Node.js-style callback API to a function that returns an\n * Observable.\n *\n * <span class=\"informal\">It's just like {@link bindCallback}, but the\n * callback is expected to be of type `callback(error, result)`.</span>\n *\n * `bindNodeCallback` is not an operator because its input and output are not\n * Observables. The input is a function `func` with some parameters, but the\n * last parameter must be a callback function that `func` calls when it is\n * done. The callback function is expected to follow Node.js conventions,\n * where the first argument to the callback is an error object, signaling\n * whether call was successful. If that object is passed to callback, it means\n * something went wrong.\n *\n * The output of `bindNodeCallback` is a function that takes the same\n * parameters as `func`, except the last one (the callback). When the output\n * function is called with arguments, it will return an Observable.\n * If `func` calls its callback with error parameter present, Observable will\n * error with that value as well. If error parameter is not passed, Observable will emit\n * second parameter. If there are more parameters (third and so on),\n * Observable will emit an array with all arguments, except first error argument.\n *\n * Note that `func` will not be called at the same time output function is,\n * but rather whenever resulting Observable is subscribed. By default call to\n * `func` will happen synchronously after subscription, but that can be changed\n * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n * can also control when values from callback will be emitted by Observable.\n * To find out more, check out documentation for {@link bindCallback}, where\n * Scheduler works exactly the same.\n *\n * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n * of returned function, when it is called.\n *\n * After Observable emits value, it will complete immediately. This means\n * even if `func` calls callback again, values from second and consecutive\n * calls will never appear on the stream. If you need to handle functions\n * that call callbacks multiple times, check out {@link fromEvent} or\n * {@link fromEventPattern} instead.\n *\n * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n * \"Node.js-style\" callbacks are just a convention, so if you write for\n * browsers or any other environment and API you use implements that callback style,\n * `bindNodeCallback` can be safely used on that API functions as well.\n *\n * Remember that Error object passed to callback does not have to be an instance\n * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n * Error parameter of callback function is interpreted as \"present\", when value\n * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n * string or boolean `true`. In all of these cases resulting Observable would error\n * with that value. This means usually regular style callbacks will fail very often when\n * `bindNodeCallback` is used. If your Observable errors much more often then you\n * would expect, check if callback really is called in Node.js-style and, if not,\n * switch to {@link bindCallback} instead.\n *\n * Note that even if error parameter is technically present in callback, but its value\n * is falsy, it still won't appear in array emitted by Observable.\n *\n * ## Examples\n * ###  Read a file from the filesystem and get the data as an Observable\n * ```javascript\n * import * as fs from 'fs';\n * const readFileAsObservable = bindNodeCallback(fs.readFile);\n * const result = readFileAsObservable('./roadNames.txt', 'utf8');\n * result.subscribe(x => console.log(x), e => console.error(e));\n * ```\n *\n * ### Use on function calling callback with multiple arguments\n * ```javascript\n * someFunction((err, a, b) => {\n *   console.log(err); // null\n *   console.log(a); // 5\n *   console.log(b); // \"some string\"\n * });\n * const boundSomeFunction = bindNodeCallback(someFunction);\n * boundSomeFunction()\n * .subscribe(value => {\n *   console.log(value); // [5, \"some string\"]\n * });\n * ```\n *\n * ### Use on function calling callback in regular style\n * ```javascript\n * someFunction(a => {\n *   console.log(a); // 5\n * });\n * const boundSomeFunction = bindNodeCallback(someFunction);\n * boundSomeFunction()\n * .subscribe(\n *   value => {}             // never gets called\n *   err => console.log(err) // 5\n * );\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link from}\n * @see {@link fromPromise}\n *\n * @param {function} func Function with a Node.js-style callback as the last parameter.\n * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n * callbacks.\n * @return {function(...params: *): Observable} A function which returns the\n * Observable that delivers the same values the Node.js callback would\n * deliver.\n * @name bindNodeCallback\n */\nexport function bindNodeCallback<T>(\n  callbackFunc: Function,\n  resultSelector: Function|SchedulerLike,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<T> {\n\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // DEPRECATED PATH\n      return (...args: any[]) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(\n        map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n      );\n    }\n  }\n\n  return function(this: any, ...args: any[]): Observable<T> {\n    const params: ParamsState<T> = {\n      subject: undefined,\n      args,\n      callbackFunc,\n      scheduler,\n      context: this,\n    };\n    return new Observable<T>(subscriber => {\n      const { context } = params;\n      let { subject } = params;\n      if (!scheduler) {\n        if (!subject) {\n          subject = params.subject = new AsyncSubject<T>();\n          const handler = (...innerArgs: any[]) => {\n            const err = innerArgs.shift();\n\n            if (err) {\n              subject.error(err);\n              return;\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, [...args, handler]);\n          } catch (err) {\n            subject.error(err);\n          }\n        }\n        return subject.subscribe(subscriber);\n      } else {\n        return scheduler.schedule<DispatchState<T>>(dispatch, 0, { params, subscriber, context });\n      }\n    });\n  };\n}\n\ninterface DispatchState<T> {\n  subscriber: Subscriber<T>;\n  context: any;\n  params: ParamsState<T>;\n}\n\ninterface ParamsState<T> {\n  callbackFunc: Function;\n  args: any[];\n  scheduler: SchedulerLike;\n  subject: AsyncSubject<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: SchedulerAction<DispatchState<T>>, state: DispatchState<T>) {\n  const { params, subscriber, context } = state;\n  const { callbackFunc, args, scheduler } = params;\n  let subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject<T>();\n\n    const handler = (...innerArgs: any[]) => {\n      const err = innerArgs.shift();\n      if (err) {\n        this.add(scheduler.schedule<DispatchErrorArg<T>>(dispatchError, 0, { err, subject }));\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        this.add(scheduler.schedule<DispatchNextArg<T>>(dispatchNext, 0, { value, subject }));\n      }\n    };\n\n    try {\n      callbackFunc.apply(context, [...args, handler]);\n    } catch (err) {\n      this.add(scheduler.schedule<DispatchErrorArg<T>>(dispatchError, 0, { err, subject }));\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\n\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\n\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { SchedulerLike, SchedulerAction } from '../types';\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\n\n// tslint:disable:max-line-length\n/** @deprecated resultSelector is no longer supported, use a mapping function. */\nexport function bindCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n\nexport function bindCallback<R1, R2, R3, R4>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): () => Observable<any[]>;\nexport function bindCallback<R1, R2, R3>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\nexport function bindCallback<R1, R2>(callbackFunc: (callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\nexport function bindCallback<R1>(callbackFunc: (callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\nexport function bindCallback(callbackFunc: (callback: () => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\n\nexport function bindCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<any[]>;\nexport function bindCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\nexport function bindCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\nexport function bindCallback<A1>(callbackFunc: (arg1: A1, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\n\nexport function bindCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<any[]>;\nexport function bindCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\nexport function bindCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\n\nexport function bindCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<any[]>;\nexport function bindCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\nexport function bindCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\n\nexport function bindCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<any[]>;\nexport function bindCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\nexport function bindCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\n\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<any[]>;\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\nexport function bindCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;\n\nexport function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((result: R) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R>;\nexport function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((...results: R[]) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R[]>;\n\nexport function bindCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n\n// tslint:enable:max-line-length\n\n/**\n * Converts a callback API to a function that returns an Observable.\n *\n * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n * it will return a function `g` that when called as `g(x)` will output an\n * Observable.</span>\n *\n * `bindCallback` is not an operator because its input and output are not\n * Observables. The input is a function `func` with some parameters, the\n * last parameter must be a callback function that `func` calls when it is\n * done.\n *\n * The output of `bindCallback` is a function that takes the same parameters\n * as `func`, except the last one (the callback). When the output function\n * is called with arguments it will return an Observable. If function `func`\n * calls its callback with one argument the Observable will emit that value.\n * If on the other hand the callback is called with multiple values the resulting\n * Observable will emit an array with said values as arguments.\n *\n * It is very important to remember that input function `func` is not called\n * when the output function is, but rather when the Observable returned by the output\n * function is subscribed. This means if `func` makes an AJAX request, that request\n * will be made every time someone subscribes to the resulting Observable, but not before.\n *\n * The last optional parameter - {@link Scheduler} - can be used to control when the call\n * to `func` happens after someone subscribes to Observable, as well as when results\n * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n * and call `subscribe` on the output Observable all function calls that are currently executing\n * will end before `func` is invoked.\n *\n * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n * In particular, if the callback is called synchronously the subscription of the resulting Observable\n * will call the `next` function synchronously as well.  If you want to defer that call,\n * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n *\n * Note that the Observable created by the output function will always emit a single value\n * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n * calls will not appear in the stream. If you need to listen for multiple calls,\n *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n *\n * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n * will be the context that the output function has at call time. In particular, if `func`\n * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n * it is recommended that the context of the output function is set to that object as well.\n *\n * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n * provides convenient error handling and probably is a better choice.\n * `bindCallback` will treat such functions the same as any other and error parameters\n * (whether passed or not) will always be interpreted as regular callback argument.\n *\n * ## Examples\n *\n * ### Convert jQuery's getJSON to an Observable API\n * ```javascript\n * // Suppose we have jQuery.getJSON('/my/url', callback)\n * var getJSONAsObservable = bindCallback(jQuery.getJSON);\n * var result = getJSONAsObservable('/my/url');\n * result.subscribe(x => console.log(x), e => console.error(e));\n * ```\n *\n * ### Receive an array of arguments passed to a callback\n * ```javascript\n * someFunction((a, b, c) => {\n *   console.log(a); // 5\n *   console.log(b); // 'some string'\n *   console.log(c); // {someProperty: 'someValue'}\n * });\n *\n * const boundSomeFunction = bindCallback(someFunction);\n * boundSomeFunction().subscribe(values => {\n *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n * });\n * ```\n *\n * ### Compare behaviour with and without async Scheduler\n * ```javascript\n * function iCallMyCallbackSynchronously(cb) {\n *   cb();\n * }\n *\n * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);\n * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n *\n * boundSyncFn().subscribe(() => console.log('I was sync!'));\n * boundAsyncFn().subscribe(() => console.log('I was async!'));\n * console.log('This happened...');\n *\n * // Logs:\n * // I was sync!\n * // This happened...\n * // I was async!\n * ```\n *\n * ### Use bindCallback on an object method\n * ```javascript\n * const boundMethod = bindCallback(someObject.methodWithCallback);\n * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n * .subscribe(subscriber);\n * ```\n *\n * @see {@link bindNodeCallback}\n * @see {@link from}\n * @see {@link fromPromise}\n *\n * @param {function} func A function with a callback as the last parameter.\n * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n * callbacks.\n * @return {function(...params: *): Observable} A function which returns the\n * Observable that delivers the same values the callback would deliver.\n * @name bindCallback\n */\nexport function bindCallback<T>(\n  callbackFunc: Function,\n  resultSelector?: Function|SchedulerLike,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<T> {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // DEPRECATED PATH\n      return (...args: any[]) => bindCallback(callbackFunc, scheduler)(...args).pipe(\n        map((args) => isArray(args) ? resultSelector(...args) : resultSelector(args)),\n      );\n    }\n  }\n\n  return function (this: any, ...args: any[]): Observable<T> {\n    const context = this;\n    let subject: AsyncSubject<T>;\n    const params = {\n      context,\n      subject,\n      callbackFunc,\n      scheduler,\n    };\n    return new Observable<T>(subscriber => {\n      if (!scheduler) {\n        if (!subject) {\n          subject = new AsyncSubject<T>();\n          const handler = (...innerArgs: any[]) => {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, [...args, handler]);\n          } catch (err) {\n            subject.error(err);\n          }\n        }\n        return subject.subscribe(subscriber);\n      } else {\n        const state: DispatchState<T> = {\n          args, subscriber, params,\n        };\n        return scheduler.schedule<DispatchState<T>>(dispatch, 0, state);\n      }\n    });\n  };\n}\n\ninterface DispatchState<T> {\n  args: any[];\n  subscriber: Subscriber<T>;\n  params: ParamsContext<T>;\n}\n\ninterface ParamsContext<T> {\n  callbackFunc: Function;\n  scheduler: SchedulerLike;\n  context: any;\n  subject: AsyncSubject<T>;\n}\n\nfunction dispatch<T>(this: SchedulerAction<DispatchState<T>>, state: DispatchState<T>) {\n  const self = this;\n  const { args, subscriber, params } = state;\n  const { callbackFunc, context, scheduler } = params;\n  let { subject } = params;\n  if (!subject) {\n    subject = params.subject = new AsyncSubject<T>();\n\n    const handler = (...innerArgs: any[]) => {\n      const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n      this.add(scheduler.schedule<NextState<T>>(dispatchNext, 0, { value, subject }));\n    };\n\n    try {\n      callbackFunc.apply(context, [...args, handler]);\n    } catch (err) {\n      subject.error(err);\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\ninterface NextState<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\n\nfunction dispatchNext<T>(this: SchedulerAction<NextState<T>>, state: NextState<T>) {\n  const { value, subject } = state;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface ErrorState<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\n\nfunction dispatchError<T>(this: SchedulerAction<ErrorState<T>>, state: ErrorState<T>) {\n  const { err, subject } = state;\n  subject.error(err);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nexport class TimeoutError extends Error {\n\n  public readonly name = 'TimeoutError';\n\n  constructor() {\n    super('Timeout has occurred');\n    (Object as any).setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n\n  public readonly name = 'EmptyError';\n\n  constructor() {\n    super('no elements in sequence');\n    (Object as any).setPrototypeOf(this, EmptyError.prototype);\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n\n  public readonly name = 'ArgumentOutOfRangeError';\n\n  constructor() {\n    super('argument out of range');\n    (Object as any).setPrototypeOf(this, ArgumentOutOfRangeError.prototype);\n  }\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\n\n/**\n * Tests to see if the object is an RxJS {@link Observable}\n * @param obj the object to test\n */\nexport function isObservable<T>(obj: any): obj is Observable<T> {\n  return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction as any,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```javascript\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.animationFrame.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n * ```\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(\n      () => scheduler.flush(null)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```javascript\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```javascript\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```javascript\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","let nextHandle = 1;\n\nconst tasksByHandle: { [handle: string]: () => void } = {};\n\nfunction runIfPresent(handle: number) {\n  const cb = tasksByHandle[handle];\n  if (cb) {\n    cb();\n  }\n}\n\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    tasksByHandle[handle] = cb;\n    Promise.resolve().then(() => runIfPresent(handle));\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    delete tasksByHandle[handle];\n  },\n};\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Subject } from './Subject';\nimport { SchedulerLike } from './types';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: (ReplayEvent<T> | T)[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n  private _infiniteTimeWindow: boolean = false;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: SchedulerLike) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n\n    if (windowTime === Number.POSITIVE_INFINITY) {\n      this._infiniteTimeWindow = true;\n      this.next = this.nextInfiniteTimeWindow;\n    } else {\n      this.next = this.nextTimeWindow;\n    }\n  }\n\n  private nextInfiniteTimeWindow(value: T): void {\n    const _events = this._events;\n    _events.push(value);\n    // Since this method is invoked in every next() call than the buffer\n    // can overgrow the max size only by one item\n    if (_events.length > this._bufferSize) {\n      _events.shift();\n    }\n\n    super.next(value);\n  }\n\n  private nextTimeWindow(value: T): void {\n    this._events.push(new ReplayEvent(this._getNow(), value));\n    this._trimBufferThenGetEvents();\n\n    super.next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n    const _infiniteTimeWindow = this._infiniteTimeWindow;\n    const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    const len = _events.length;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.isStopped || this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    if (_infiniteTimeWindow) {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next(<T>_events[i]);\n      }\n    } else {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next((<ReplayEvent<T>>_events[i]).value);\n      }\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = <ReplayEvent<T>[]>this._events;\n\n    const eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```javascript\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```javascript\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n * ```javascript\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13\n * ```javascript\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13\n *     ? throwError('Thirteens are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n * ```\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nimport { Observable } from '../Observable';\n\nexport function of<T>(a: T, scheduler?: SchedulerLike): Observable<T>;\nexport function of<T, T2>(a: T, b: T2, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n  } else {\n    scheduler = undefined;\n  }\n  switch (args.length) {\n    case 0:\n      return empty(scheduler);\n    case 1:\n      return scheduler ? fromArray(args as T[], scheduler) : scalar(args[0] as T);\n    default:\n      return fromArray(args as T[], scheduler);\n  }\n}\n","import { Observable } from '../Observable';\n\nexport function scalar<T>(value: T) {\n  const result = new Observable<T>(subscriber => {\n    subscriber.next(value);\n    subscriber.complete();\n  });\n  result._isScalar = true;\n  (result as any).value = value;\n  return result;\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```javascript\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```javascript\n * const interval$ = interval(1000);\n * result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nexport function emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```javascript\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```javascript\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport class AsyncScheduler extends Scheduler {\n  public static delegate?: Scheduler;\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @deprecated internal use only\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @deprecated internal use only\n   */\n  public scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    super(SchedulerAction, () => {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    });\n  }\n\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return super.schedule(work, delay, state);\n    }\n  }\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport class Scheduler implements SchedulerLike {\n\n  /** @nocollapse */\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * ##Examples\n * Group objects by id and return as array\n * ```javascript\n * of<Obj>(\n *   {id: 1, name: 'aze1'},\n *   {id: 2, name: 'sf2'},\n *   {id: 2, name: 'dg2'},\n *   {id: 1, name: 'erg1'},\n *   {id: 1, name: 'df1'},\n *   {id: 2, name: 'sfqfb2'},\n *   {id: 3, name: 'qfs3'},\n *   {id: 2, name: 'qsgqsfg2'},\n * ).pipe(\n *   groupBy(p => p.id),\n *   flatMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], []))),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n * ```\n *\n * Pivot data on the id field\n * ```javascript\n * of<Obj>(\n *   {id: 1, name: 'aze1'},\n *   {id: 2, name: 'sf2'},\n *   {id: 2, name: 'dg2'},\n *   {id: 1, name: 'erg1'},\n *   {id: 1, name: 'df1'},\n *   {id: 2, name: 'sfqfb2'},\n *   {id: 3, name: 'qfs1'},\n *   {id: 2, name: 'qsgqsfg2'},\n * ).pipe(\n *   groupBy(p => p.id, p => p.name),\n *   flatMap( (group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))),\n *   map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)})),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n * ```\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T | R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map<K, Subject<T | R>>();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = (this.subjectSelector ? this.subjectSelector() : new Subject<R>()) as Subject<T | R>;\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T | any>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  /** @deprecated Do not construct this type. Internal use only */\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const { refCountSubscription, groupSubject } = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n\n  public readonly name = 'ObjectUnsubscribedError';\n\n  constructor() {\n    super('object unsubscribed');\n    (Object as any).setPrototypeOf(this, ObjectUnsubscribedError.prototype);\n  }\n}\n","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```javascript\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```javascript\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```javascript\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<R>(...operations: OperatorFunction<any, any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```javascript\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { root } from '../util/root';\n\n/** Symbol.observable addition */\n/* Note: This will add Symbol.observable globally for all TypeScript users,\n  however, we are no longer polyfilling Symbol.observable */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol;\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n          // node_modules, we cannot rely on `instanceof` checks\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","export const rxSubscriber =\n  (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n\n  public readonly name = 'UnsubscriptionError';\n\n  constructor(public errors: any[]) {\n    super(errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (Object as any).setPrototypeOf(this, UnsubscriptionError.prototype);\n  }\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; });\n}","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { IClockNumber, IDisplayPreference, TimePickerConfig } from '../definitions';\nimport { AtpCoreService } from '../atp-core.service';\nimport { ITime } from '../definitions';\nexport class TimePickerComponent implements OnInit {\n\n  _ref: any;\npublic subject: any = null;\npublic activeModal = false;\npublic timerElement: any;\npublic clockObject: Array<any>;\npublic isClicked: boolean;\npublic clockType: 'minute' | 'hour' = 'hour';\npublic time: ITime = {\n    ampm: 'AM',\n    minute: 0,\n    hour: 12\n  };\npublic nowTime: any = this.time.hour;\npublic degree: any;\npublic config: TimePickerConfig;\npublic appRef: any;\npublic isPopup = true;\npublic allowed: any;\npublic preference: IDisplayPreference;\n/**\n * @param {?} core\n */\nconstructor(\nprivate core: AtpCoreService\n  ) { }\n/**\n * @param {?} time\n * @return {?}\n */\npublic ParseStringToTime (time: string): void {\n    time = (time === '' || time === undefined || time === null) ? this.time.hour + ':' + this.time.minute : time;\n    this.time = this.core.StringToTime(time);\n  }\n/**\n * @return {?}\n */\npublic GetTime () {\n    const /** @type {?} */ time = this.core.TimeToString(this.time);\n    this.subject.next(time);\n  }\n\n  clockMaker = () => {\n    const /** @type {?} */ type = this.clockType;\n    this.clockObject = this.core.ClockMaker(type);\n    this.setArrow(null);\n  }\n\n  setActiveTime = () => {\n    this.nowTime = (this.clockType === 'minute' ? this.time.minute : this.time.hour);\n  }\n\n  setArrow = (obj: any) => {\n    if (obj) {\n      this.clockType = obj.type;\n      if (this.clockType === 'minute') {\n        this.time.minute = obj.time;\n      } else {\n        this.time.hour = obj.time;\n      }\n    }\n    const /** @type {?} */ step = (this.clockType === 'minute') ? 6 : 30;\n    const /** @type {?} */ time = (this.clockType === 'minute') ? this.time.minute : this.time.hour;\n    const /** @type {?} */ degrees = time * step;\n    this.rotationClass(degrees);\n    this.setActiveTime();\n  }\n\n  rotationClass = (degrees: any) => {\n    this.degree = degrees;\n  }\n/**\n * @return {?}\n */\nsetTime() {\n    this.isClicked = false;\n    if (this.config.changeToMinutes && this.clockType === 'hour') {\n      this.clockType = 'minute';\n      this.clockMaker();\n    }\n  }\n\n  getDegree = (ele: any) => {\n    const /** @type {?} */ step = this.clockType === 'minute' ? 6 : 30;\n    const /** @type {?} */ parrentPos = ele.currentTarget.getBoundingClientRect();\n    if (this.isClicked && (ele.currentTarget === ele.target || ele.target.nodeName === 'BUTTON')) {\n      const /** @type {?} */ clock = {\n        width: ele.currentTarget.offsetWidth,\n        height: ele.currentTarget.offsetHeight\n      };\n      const /** @type {?} */ degrees = this.core.CalcDegrees(ele, parrentPos, step);\n      let /** @type {?} */ hour = this.time.hour, /** @type {?} */\n          minute = this.time.minute;\n\n      if (this.clockType === 'hour') {\n        hour = (degrees / step);\n        hour = (hour > 12) ? hour - 12 : hour;\n      } else if (this.clockType === 'minute') {\n        minute = (degrees / step);\n        minute = (minute > 59) ? minute - 60 : minute;\n      }\n\n      const /** @type {?} */ min = this.config.rangeTime.start, /** @type {?} */\n            max = this.config.rangeTime.end;\n\n      const /** @type {?} */ nowMinHour = +min.split(':')[0] < 12 ? +min.split(':')[0] : +min.split(':')[0] - 12;\n      const /** @type {?} */ nowMaxHour = +max.split(':')[0] < 12 ? +max.split(':')[0] : +max.split(':')[0] - 12;\n      const /** @type {?} */ nowMinMin = +min.split(':')[1];\n      const /** @type {?} */ nowMaxMin = +max.split(':')[1];\n\n      const /** @type {?} */ nowTime = this.GetNowTime(hour, this.time.ampm, minute);\n      if (this.allowed.indexOf(nowTime) > -1) {\n        this.time.hour = hour;\n        this.time.minute = minute;\n        this.rotationClass(degrees);\n        this.setActiveTime();\n      }else if (this.clockType === 'hour' && (hour === nowMinHour && minute <= nowMinMin)) {\n        this.time.hour = nowMinHour;\n        this.time.minute = nowMinMin;\n      }else if (this.clockType === 'hour' && (hour === nowMaxHour && minute >= nowMaxMin)) {\n        this.time.hour = nowMaxHour;\n        this.time.minute = nowMaxMin;\n      }\n    }\n  }\n/**\n * @param {?} hour\n * @param {?} ampm\n * @param {?} minute\n * @return {?}\n */\nprivate GetNowTime (hour: number, ampm: 'AM' | 'PM', minute: number): string {\n    const /** @type {?} */ Hour = (hour === 12 && ampm === 'AM') ? '0' : hour;\n    const /** @type {?} */ nowTime = Hour + ':' + minute + ' ' + ampm;\n    return nowTime;\n  }\n/**\n * @return {?}\n */\ncheckBet() {\n    const /** @type {?} */ nowTime = this.GetNowTime(this.time.hour, this.time.ampm, this.time.minute);\n    if (this.allowed.indexOf(nowTime) === -1) {\n      this.ParseStringToTime(this.config.rangeTime.start);\n      this.setArrow(null);\n      this.setActiveTime();\n    }\n  }\n/**\n * @return {?}\n */\nmodalAnimation() {\n    setTimeout(() => {\n      this.activeModal = true;\n    }, 1);\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.allowed = this.core.allowedTimes (this.config.rangeTime.start, this.config.rangeTime.end);\n    if (this.config && this.config.onlyMinute) {\n      this.clockType = 'minute';\n    }\n    if (this.config && this.config.onlyPM) {\n      this.time.ampm = 'PM';\n    }\n    this.clockMaker();\n    this.modalAnimation();\n  }\n/**\n * @return {?}\n */\npublic MinuteClick () {\n    /**\n     * We are not permitting user to select the minute.\n     * but anyway, it will return the standard time, if provided the default time.\n     */\n    if (this.config && this.config.onlyHour) {\n      return false;\n    }\n    this.clockType = 'minute';\n    this.clockMaker();\n  }\n/**\n * @return {?}\n */\npublic HourClick () {\n    /**\n     * We are not permitting user to select the minute.\n     * but anyway, it will return the standard time, if provided the default time.\n     */\n    if (this.config && this.config.onlyMinute) {\n      return false;\n    }\n    this.clockType = 'hour';\n    this.clockMaker();\n  }\n/**\n * @return {?}\n */\nSetAM () {\n    if (this.config && this.config.onlyPM) {\n      return false;\n    }\n    this.time.ampm = 'AM';\n    this.checkBet();\n  }\n/**\n * @return {?}\n */\nSetPM () {\n    if (this.config && this.config.onlyAM) {\n      return false;\n    }\n    this.time.ampm = 'PM';\n    this.checkBet();\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nClose(e: any) {\n    if (e.target === e.currentTarget) {\n      if (this.isPopup === true) {\n        this.activeModal = false;\n        setTimeout(() => {\n          this.appRef.detachView(this._ref.hostView);\n          this._ref.destroy();\n        }, 400);\n      }\n    }\n  }\n/**\n * @return {?}\n */\npublic GetSeparator () {\n    if (this.preference && this.preference.separator) {\n      return this.preference.separator;\n    }\n    return ':';\n  }\n/**\n * @param {?} period\n * @return {?}\n */\npublic GetPeriod (period: 'AM' | 'PM') {\n    if (this.preference && this.preference.period) {\n      return this.preference.period(period);\n    }\n    return period;\n  }\n/**\n * @return {?}\n */\npublic GetMinute () {\n    if (this.preference && this.preference.minute) {\n      return this.preference.minute(this.time.minute);\n    }\n    let /** @type {?} */ min: string = this.time.minute.toString();\n    if (+min < 10) {\n      min = '0' + min;\n    }\n    return min;\n  }\n/**\n * @return {?}\n */\npublic GetHour () {\n    if (this.preference && this.preference.hour) {\n      return this.preference.hour(this.time.hour);\n    }\n    return this.time.hour;\n  }\n/**\n * @param {?} clock\n * @return {?}\n */\npublic GetClockTime(clock: IClockNumber) {\n    if ( ! this.preference) {\n      return clock.time;\n    }\n    if ( this.clockType === 'hour' && this.preference.clockHour) {\n      return this.preference.clockHour(clock.time);\n    }\n    if ( this.clockType === 'minute' && this.preference.clockMinute) {\n      return this.preference.clockMinute(clock.time);\n    }\n    return clock.time;\n  }\n/**\n * @param {?} key\n * @return {?}\n */\npublic GetLabel (key: string) {\n    const /** @type {?} */ defaults = {\n      'ok': 'Ok',\n      'cancel': 'Cancel'\n    };\n    if ((this.preference && this.preference.labels && this.preference.labels.ok)) {\n      defaults.ok = this.preference.labels.ok;\n    }\n    if ((this.preference && this.preference.labels && this.preference.labels.cancel)) {\n      defaults.cancel = this.preference.labels.cancel;\n    }\n    return defaults[key];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'time-picker',\n  template: `\n    <div id=\"time-picker-wrapper\" class=\"{{config.theme}}\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\" (click)=\"Close($event);\">\n      <div id=\"time-picker\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\">\n        <div class=\"time-picker-header\">\n          <div class=\"time-picker-selected-time\">\n              <div class=\"time-picker-hour\" (click)=\"HourClick()\" [attr.disabled]=\"(config.onlyMinute) ? 'disabled' : null\"\n                [ngClass]=\"{'selected' : clockType == 'hour'}\">{{GetHour()}}</div>\n              <span class=\"time-seprator\">{{GetSeparator()}}</span>\n              <div class=\"time-picker-minute\" (click)=\"MinuteClick();\" [attr.disabled]=\"(config.onlyHour) ? 'disabled' : null\"\n                [ngClass]=\"{'selected' : clockType == 'minute'}\">{{GetMinute()}}</div>\n          </div>\n          <div class=\"time-picker-selected-ampm\">\n            <div class=\"time-picker-am\" (click)=\"SetAM();\" [attr.disabled]=\"(config.onlyPM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'AM'}\">{{GetPeriod('AM')}}</div>\n            <div class=\"time-picker-pm\" (click)=\"SetPM();\" [attr.disabled]=\"(config.onlyAM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'PM'}\">{{GetPeriod('PM')}}</div>\n\n          </div>\n        </div>\n        <div class=\"time-picker-content\">\n            <div class=\"time-picker-clock\" (mousemove)=\"getDegree($event);\" (mousedown)=\"isClicked=true; getDegree($event);\" (mouseup)=\"setTime()\">\n              <button *ngFor=\"let clock of clockObject\" [ngClass]=\"{'active' : nowTime == clock.time}\" \n                [id]=\"'timepicker-item-id-' + clock.time\" \n                [ngStyle]=\"{top: clock.top,left: clock.left, color: nowTime == clock.time ? config.arrowStyle.color :  '', background: nowTime == clock.time ? config.arrowStyle.background : 'transparent'}\">\n                {{GetClockTime(clock)}}\n              </button>\n              <div class=\"time-picker-clock-origin\" [ngStyle]=\"{ background: config.arrowStyle.background}\"></div>\n              <div id=\"tpc-arrow\" class=\"time-picker-clock-arrow\" [ngStyle]=\"{transform: 'rotate(' + this.degree + 'deg)','-webkit-transform': 'rotate(' + this.degree + 'deg)', background: config.arrowStyle.background}\">\n                <span [ngStyle]=\"{ background: config.arrowStyle.background }\"></span>\n              </div>\n            </div>\n        </div>\n        <div class=\"time-picker-footer\">\n            <button (click)=\"Close($event);\">{{GetLabel('cancel')}}</button>\n            <button (click)=\"GetTime();Close($event);\" class=\"atp-ref-dialog-close\">{{GetLabel('ok')}}</button>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    #time-picker-wrapper {\n      position: fixed;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      background: transparent;\n      -webkit-transition: background 0.4s;\n      transition: background 0.4s;\n      font-family: 'Roboto', sans-serif;\n      z-index: 1000; }\n      #time-picker-wrapper.static {\n        position: relative !important;\n        background: transparent !important;\n        display: inline-block;\n        z-index: 0; }\n      #time-picker-wrapper.active {\n        background: rgba(0, 0, 0, 0.3); }\n      #time-picker-wrapper.dark #time-picker {\n        background: #424242; }\n        #time-picker-wrapper.dark #time-picker .time-picker-header {\n          border-bottom: none;\n          background: #555555; }\n          #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time {\n            color: #999; }\n            #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: #999; }\n            #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.dark #time-picker .time-picker-clock {\n          background: #555555; }\n          #time-picker-wrapper.dark #time-picker .time-picker-clock > button {\n            color: #fff; }\n        #time-picker-wrapper.dark #time-picker .time-picker-footer {\n          border-top: none; }\n          #time-picker-wrapper.dark #time-picker .time-picker-footer button {\n            background: #555555;\n            color: #fff; }\n            #time-picker-wrapper.dark #time-picker .time-picker-footer button:hover {\n              background: #777; }\n      #time-picker-wrapper.light #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.light #time-picker .time-picker-header {\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time {\n            color: #aaa; }\n            #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #000; }\n          #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: #aaa; }\n            #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #000; }\n        #time-picker-wrapper.light #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock > button.active {\n              background: blue;\n              color: #fff; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: blue; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: blue; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: blue; }\n        #time-picker-wrapper.light #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.light #time-picker .time-picker-footer button {\n            background: #f1f1f1; }\n            #time-picker-wrapper.light #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-green #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-header {\n          background-color: #00897b;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock > button.active {\n              background: #00897b;\n              color: #fff; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #00897b; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #00897b; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #00897b; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #00897b; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-blue #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-header {\n          background-color: #3F51B5;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock > button.active {\n              background: #3F51B5;\n              color: #fff; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #3F51B5; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #3F51B5; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #3F51B5; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #3F51B5; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-red #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-header {\n          background-color: #F44336;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock > button.active {\n              background: #F44336;\n              color: #fff; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #F44336; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #F44336; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #F44336; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #F44336; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-purple #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-header {\n          background-color: #9C27B0;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock > button.active {\n              background: #9C27B0;\n              color: #fff; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #9C27B0; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #9C27B0; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #9C27B0; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #9C27B0; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-orange #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-header {\n          background-color: #FF9800;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock > button.active {\n              background: #FF9800;\n              color: #fff; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #FF9800; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #FF9800; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #FF9800; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #FF9800; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper #time-picker {\n        width: 325px;\n        height: auto;\n        -webkit-box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n                box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n        border-radius: 2px;\n        margin: 15vh auto !important;\n        -webkit-transform: scale(0.5) !important;\n                transform: scale(0.5) !important;\n        -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;\n        transition: opacity 0.3s, -webkit-transform 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s, -webkit-transform 0.3s;\n        opacity: 0; }\n        #time-picker-wrapper #time-picker.static {\n          margin: 0px !important;\n          -webkit-box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 0 7px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n                  box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 0 7px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12); }\n        #time-picker-wrapper #time-picker.active {\n          -webkit-transform: scale(1) !important;\n                  transform: scale(1) !important;\n          opacity: 1; }\n        #time-picker-wrapper #time-picker .time-picker-header {\n          text-align: center;\n          padding: 15px 0px; }\n          #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time {\n            font-size: 35px;\n            padding: 5px 0px; }\n            #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div {\n              display: inline-block;\n              cursor: pointer; }\n              #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div[disabled=true] {\n                cursor: default; }\n          #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm {\n            font-size: 18px; }\n            #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div {\n              display: inline-block;\n              padding: 0 5px;\n              cursor: pointer; }\n              #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div[disabled=true] {\n                cursor: default; }\n        #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock {\n          width: 200px;\n          height: 200px;\n          padding: 24px;\n          border-radius: 50%;\n          cursor: pointer;\n          margin: 25px auto;\n          position: relative;\n          user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          -webkit-user-select: none; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock button {\n            border: none;\n            position: absolute;\n            width: 35px;\n            height: 35px;\n            border-radius: 50%;\n            cursor: pointer;\n            font-size: 17px;\n            text-align: center;\n            padding: 0;\n            -webkit-transition: all .2s;\n            transition: all .2s;\n            z-index: 3; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-origin {\n            width: 6px;\n            height: 6px;\n            border-radius: 50%;\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            margin-left: -3px;\n            margin-top: -3px; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow {\n            width: 2px;\n            height: 41%;\n            position: absolute;\n            left: 0;\n            top: 22px;\n            right: 0;\n            margin: auto;\n            -webkit-transform-origin: top left;\n            transform-origin: bottom; }\n            #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow span {\n              width: 8px;\n              height: 8px;\n              border-radius: 50%;\n              position: absolute;\n              top: 0;\n              right: -3px; }\n        #time-picker-wrapper #time-picker .time-picker-footer {\n          padding: 15px;\n          text-align: right; }\n          #time-picker-wrapper #time-picker .time-picker-footer button {\n            border: transparent;\n            margin-left: 10px;\n            padding: 10px;\n            font-size: 14px;\n            border-radius: 2px;\n            cursor: pointer; }\n\n    * {\n      outline: none;\n      -webkit-box-sizing: content-box;\n              box-sizing: content-box; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AtpCoreService, },\n];\n}\n\nfunction TimePickerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTimePickerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTimePickerComponent.ctorParameters;\n/** @type {?} */\nTimePickerComponent.prototype._ref;\n/** @type {?} */\nTimePickerComponent.prototype.subject;\n/** @type {?} */\nTimePickerComponent.prototype.activeModal;\n/** @type {?} */\nTimePickerComponent.prototype.timerElement;\n/** @type {?} */\nTimePickerComponent.prototype.clockObject;\n/** @type {?} */\nTimePickerComponent.prototype.isClicked;\n/** @type {?} */\nTimePickerComponent.prototype.clockType;\n/** @type {?} */\nTimePickerComponent.prototype.time;\n/** @type {?} */\nTimePickerComponent.prototype.nowTime;\n/** @type {?} */\nTimePickerComponent.prototype.degree;\n/** @type {?} */\nTimePickerComponent.prototype.config;\n/** @type {?} */\nTimePickerComponent.prototype.appRef;\n/** @type {?} */\nTimePickerComponent.prototype.isPopup;\n/** @type {?} */\nTimePickerComponent.prototype.allowed;\n/** @type {?} */\nTimePickerComponent.prototype.preference;\n/** @type {?} */\nTimePickerComponent.prototype.clockMaker;\n/** @type {?} */\nTimePickerComponent.prototype.setActiveTime;\n/** @type {?} */\nTimePickerComponent.prototype.setArrow;\n/** @type {?} */\nTimePickerComponent.prototype.rotationClass;\n/** @type {?} */\nTimePickerComponent.prototype.getDegree;\n/** @type {?} */\nTimePickerComponent.prototype.core;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { ITime } from './definitions';\nexport class AtpCoreService {\nconstructor() { }\n/**\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\npublic allowedTimes (min, max) {\n    const /** @type {?} */ allTimes = [];\n    const /** @type {?} */ nowMinHour = +min.split(':')[0];\n    const /** @type {?} */ nowMaxHour = +max.split(':')[0];\n    const /** @type {?} */ nowMinMin = +min.split(':')[1];\n    const /** @type {?} */ nowMaxMin = +max.split(':')[1];\n    for (let /** @type {?} */ i = nowMinHour; i <= nowMaxHour; i++) {\n      let /** @type {?} */ j = 0, /** @type {?} */\n          jDest = 59;\n      if (i === nowMinHour) {\n        j = nowMinMin;\n      }else if (i === nowMaxHour) {\n        jDest = nowMaxMin;\n      }\n      for (j; j <= jDest; j++) {\n        const /** @type {?} */ hour = i <= 12 ? i : i - 12;\n        const /** @type {?} */ minute = j;\n        const /** @type {?} */ ampm = i < 12 ? 'AM' : 'PM';\n        allTimes.push(hour + ':' + minute + ' ' + ampm);\n      }\n    }\n    return allTimes;\n  }\n/**\n * @param {?} type\n * @return {?}\n */\npublic ClockMaker (type: 'minute' | 'hour'): Array<any> {\n    const /** @type {?} */ items = [];\n    const /** @type {?} */ timeVal = (type === 'minute') ? 60 : 12;\n    const /** @type {?} */ timeStep = (type === 'minute') ? 5 : 1;\n    const /** @type {?} */ timeStart = (type === 'minute') ? 0 : 1;\n    const /** @type {?} */ r = 124;\n    const /** @type {?} */ j = r - 25;\n\n    for (let /** @type {?} */ min = timeStart; min <= timeVal; min += timeStep) {\n      if (min !== 60) {\n        const /** @type {?} */ str = String(min);\n        const /** @type {?} */ x = j * Math.sin(Math.PI * 2 * (min / timeVal));\n        const /** @type {?} */ y = j * Math.cos(Math.PI * 2 * (min / timeVal));\n\n        items.push({\n          time: str,\n          left: (x + r - 17) + 'px',\n          top: (-y + r - 17) + 'px',\n          type\n        });\n      }\n    }\n    return items;\n  }\n/**\n * @param {?} time\n * @return {?}\n */\npublic TimeToString(time: ITime): string {\n    const { ampm, minute, hour } = time;\n    let /** @type {?} */ hh = ampm === 'PM' ? +hour + 12 : +hour;\n    if (ampm === 'AM' && hh === 12) {\n      hh = 0;\n    }\n    if ( hh === 24) {\n      hh = 12;\n    }\n    hh = hh < 10 ? '0' + hh : /** @type {?} */(( '' + hh as any));\n    const /** @type {?} */ mm = minute < 10 ? '0' + minute : minute;\n    return `${hh}:${mm}`;\n  }\n/**\n * Converts 00:00 format to ITime object\n * @param {?} time\n * @return {?}\n */\npublic StringToTime (time: string): ITime {\n    const [h, m] = time.split(':');\n    let /** @type {?} */ hour = +h > 12 ? +h - 12 : +h;\n    hour = hour === 0 ? 12 : hour;\n    const /** @type {?} */ ampm = +h >= 12 ? 'PM' : 'AM';\n    return {\n      ampm, minute: +m, hour\n    };\n  }\n/**\n * \\@experimental\n * @param {?} ele\n * @param {?} parrentPos\n * @param {?} step\n * @return {?}\n */\npublic CalcDegrees (ele: any, parrentPos: any, step: number): number {\n    const /** @type {?} */ clock = {\n      width: ele.currentTarget.offsetWidth,\n      height: ele.currentTarget.offsetHeight\n    };\n    const /** @type {?} */ targetX = clock.width / 2;\n    const /** @type {?} */ targetY = clock.height / 2;\n    const /** @type {?} */ Vx = Math.round((ele.clientX - parrentPos.left) - targetX);\n    const /** @type {?} */ Vy = Math.round(targetY - (ele.clientY - parrentPos.top));\n    let /** @type {?} */ radians = -Math.atan2(Vy, Vx);\n    radians += 2.5 * Math.PI;\n\n    let /** @type {?} */ degrees = Math.round(radians * 180 / Math.PI);\n    const /** @type {?} */ degMod = degrees % step;\n    if (degMod >= step / 2) {\n      degrees = degrees + (step - degMod);\n    } else if (degMod < step / 2) {\n      degrees = degrees - degMod;\n    }\n    return degrees;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AtpCoreService_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpCoreService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpCoreService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["Symbol_iterator","tslib_1.__extends","iterator","Symbol_observable","empty","refCount","higherOrderRefCount","RefCountSubscriber","RefCountOperator","rxSubscriberSymbol","observable","emptyObserver","core"],"mappings":"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"}
